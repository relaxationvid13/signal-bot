# -*- coding: utf-8 -*-
"""
–≠–∫–æ–Ω–æ–º-–±–æ—Ç: —Å–∏–≥–Ω–∞–ª—ã –ø—Ä–∏ 2/3 –≥–æ–ª–∞—Ö –Ω–∞ ~20' + –æ—Ç—á—ë—Ç—ã.
- –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç: 1 –∑–∞–ø—Ä–æ—Å /fixtures?live=all
- –°–∏–≥–Ω–∞–ª: —Ç–æ–ª—å–∫–æ –Ω–∞ ~20' (19..22 –º–∏–Ω), –µ—Å–ª–∏ —Ä–æ–≤–Ω–æ 2 –∏–ª–∏ 3 –≥–æ–ª–∞
- –û—Ç—á—ë—Ç: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 23:30 –ø–æ Europe/Warsaw (–æ–∫–Ω–æ 23:30..23:35),
         –ø–ª—é—Å –Ω–µ–¥–µ–ª—å–Ω–∞—è –∏ –º–µ—Å—è—á–Ω–∞—è —Å–≤–æ–¥–∫–∏.
- –†—É—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ Telegram: /status, /report, /test_signal
- Render-friendly: Flask healthcheck + infinity_polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
"""

import os, sys, time, json, logging
from datetime import datetime, timedelta
from threading import Thread

import pytz
import requests
import telebot
from flask import Flask

# ================== –ö–æ–Ω—Ñ–∏–≥ / –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ==================

# –°–µ–∫—Ä–µ—Ç—ã –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID")
API_KEY   = os.getenv("API_FOOTBALL_KEY")

if not API_TOKEN or not CHAT_ID or not API_KEY:
    sys.exit("‚ùå –ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_BOT_TOKEN / TELEGRAM_CHAT_ID / API_FOOTBALL_KEY")

CHAT_ID   = int(CHAT_ID)

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ ‚Äî –ü–æ–ª—å—à–∞
TIMEZONE = "Europe/Warsaw"

# –≠–∫–æ–Ω–æ–º-—Ä–µ–∂–∏–º –æ–ø—Ä–æ—Å–∞
POLL_SECONDS = 15 * 60            # 1 –∑–∞–ø—Ä–æ—Å —Ä–∞–∑ –≤ 15 –º–∏–Ω—É—Ç ‚âà 96/—Å—É—Ç–∫–∏
WINDOW_20    = range(19, 23)      # –æ–∫–Ω–æ ¬´~20'¬ª (19..22, –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)

# ¬´–õ–∏–Ω–∏—è¬ª –ø–æ –Ω–∞—à–µ–º—É –ø—Ä–∞–≤–∏–ª—É:
#   2 –≥–æ–ª–∞ -> —Å—Ç–∞–≤–∏–º –¢–ë3, –≤—ã–∏–≥—Ä—ã—à –µ—Å–ª–∏ –∏—Ç–æ–≥ >= 4
#   3 –≥–æ–ª–∞ -> —Å—Ç–∞–≤–∏–º –¢–ë4, –≤—ã–∏–≥—Ä—ã—à –µ—Å–ª–∏ –∏—Ç–æ–≥ >= 5
ODDS_MIN = 1.29                   # –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –∫—ç—Ñ–∞ (–µ—Å–ª–∏ –ø–æ–∑–∂–µ –ø–æ–¥–∫–ª—é—á–∏—à—å —Ä–µ–∞–ª—å–Ω—ã–µ)
ODDS_MAX = 2.00                   # –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞

# –£—Å–ª–æ–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è –æ—Ç—á—ë—Ç–∞ (–≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö, —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å 1)
STAKE_UNITS = 1

# –§–∞–π–ª—ã
LOG_FILE   = "bot.log"
STATE_FILE = "signals.json"

# ================== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==================

logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s %(levelname)s: %(message)s"
)
log = logging.getLogger("econ-bot")

# ================== Telegram / Flask ==================

bot = telebot.TeleBot(API_TOKEN, parse_mode="Markdown")

app = Flask(__name__)

@app.get("/")
def healthcheck():
    return "ok"

def run_http():
    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)

def run_telebot():
    # –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–∏—ë–º–∞ –∫–æ–º–∞–Ω–¥
    bot.infinity_polling(none_stop=True, timeout=60, long_polling_timeout=60)

# ================== API-Football ==================

API = requests.Session()
API.headers.update({"x-apisports-key": API_KEY})
DEFAULT_TIMEOUT = 15

def get_live():
    """1 –∑–∞–ø—Ä–æ—Å ‚Äî –≤—Å–µ –ª–∞–π–≤—ã –ø–æ —Ñ—É—Ç–±–æ–ª—É"""
    try:
        r = API.get("https://v3.football.api-sports.io/fixtures?live=all", timeout=DEFAULT_TIMEOUT)
        if r.status_code != 200:
            log.warning("fixtures HTTP %s %s", r.status_code, r.text[:200])
        r.raise_for_status()
        return r.json().get("response", []) or []
    except Exception as e:
        log.error(f"get_live error: {e}")
        return []

def get_fixture_result(fid: int):
    """1 –∑–∞–ø—Ä–æ—Å ‚Äî –∏—Ç–æ–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞."""
    try:
        r = API.get(f"https://v3.football.api-sports.io/fixtures?id={fid}", timeout=DEFAULT_TIMEOUT)
        r.raise_for_status()
        resp = r.json().get("response", []) or []
        if not resp:
            return None
        m = resp[0]
        st = m["fixture"]["status"]["short"]
        gh = m["goals"]["home"] or 0
        ga = m["goals"]["away"] or 0
        return st, gh, ga
    except Exception as e:
        log.error(f"get_fixture_result({fid}) error: {e}")
        return None

def get_over_odds(fid: int, line: str):
    """
    –ó–∞–≥–ª—É—à–∫–∞ –ø–æ–¥ –±—É–¥—É—â—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∫—ç—Ñ–æ–≤.
    line: '–¢–ë3' –∏–ª–∏ '–¢–ë4'
    –í–µ—Ä–Ω–∏ float –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å.
    """
    return None

# ================== –ü–∞–º—è—Ç—å / –°–æ—Å—Ç–æ—è–Ω–∏–µ ==================

signals = []          # [{...}, ...]
signaled_ids = set()  # —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å

def load_state():
    global signals, signaled_ids
    if not os.path.exists(STATE_FILE):
        return
    try:
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        signals = data.get("signals", [])
        signaled_ids = set(data.get("signaled_ids", []))
    except Exception as e:
        log.error(f"load_state error: {e}")

def save_state():
    try:
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump({"signals": signals, "signaled_ids": list(signaled_ids)}, f, ensure_ascii=False)
    except Exception as e:
        log.error(f"save_state error: {e}")

# ================== –£—Ç–∏–ª–∏—Ç—ã ==================

def now_local():
    return datetime.now(pytz.timezone(TIMEZONE))

def send(text: str):
    try:
        bot.send_message(CHAT_ID, text)
    except Exception as e:
        log.error(f"Telegram send error: {e}")

# ================== –°–∫–∞–Ω–µ—Ä –ª–∞–π–≤–æ–≤ ==================

def format_signal_msg(rec):
    gh, ga = rec["goals_home"], rec["goals_away"]
    total = gh + ga
    line  = rec["bet_line"]
    odds  = rec.get("odds")
    minute = rec["minute"]
    return (
        "‚ö™ *–°—Ç–∞–≤–∫–∞!*\n"
        f"üèÜ {rec['country']} ‚Äî {rec['league']}\n"
        f"{rec['home']} {gh} ‚Äî {ga} {rec['away']}\n"
        f"‚è± ~{minute}'  (–≤—Å–µ–≥–æ: {total}, –ª–∏–Ω–∏—è: {line})\n"
        f"{'üí¨ –ö—Ñ: ' + str(odds) if odds else ''}\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    )

def scan_and_signal():
    live = get_live()
    for m in live:
        try:
            f = m["fixture"]; t = m["teams"]; g = m["goals"]; L = m["league"]
            fid = f["id"]
            elapsed = f["status"]["elapsed"] or 0

            if fid in signaled_ids:
                continue

            if elapsed in WINDOW_20:
                gh, ga = g["home"] or 0, g["away"] or 0
                total = gh + ga
                if total in (2, 3):
                    # –õ–∏–Ω–∏—è –ø–æ –ø—Ä–∞–≤–∏–ª—É
                    bet_line = "–¢–ë3" if total == 2 else "–¢–ë4"

                    # –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—à—å –∏—Å—Ç–æ—á–Ω–∏–∫ –∫—ç—Ñ–æ–≤ ‚Äî —Å—é–¥–∞:
                    odds = get_over_odds(fid, bet_line)  # None –Ω–∞ —Ç–µ–∫—É—â–µ–º —Ç–∞—Ä–∏—Ñ–µ

                    # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã –∫—Ñ ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π:
                    # if odds is not None and not (ODDS_MIN <= odds <= ODDS_MAX):
                    #     continue

                    rec = {
                        "fixture_id": fid,
                        "home": t["home"]["name"],
                        "away": t["away"]["name"],
                        "league": L["name"],
                        "country": L["country"],
                        "minute": int(elapsed),
                        "goals_home": gh,
                        "goals_away": ga,
                        "total_at_signal": total,
                        "bet_line": bet_line,
                        "odds": odds,
                        "ts": int(now_local().timestamp())
                    }
                    signals.append(rec)
                    signaled_ids.add(fid)
                    save_state()

                    send(format_signal_msg(rec))
                    log.info("Signal sent for %s - %s (fid=%s)", rec['home'], rec['away'], fid)
        except Exception as e:
            log.error(f"scan_and_signal item error: {e}")

# ================== –û—Ç—á—ë—Ç—ã ==================

def settle_one(rec):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (is_settled, is_win, gh, ga, final_status)
    """
    res = get_fixture_result(rec["fixture_id"])
    if not res:
        return False, False, None, None, None
    st, gh, ga = res
    if st != "FT":
        return False, False, gh, ga, st

    total = (gh or 0) + (ga or 0)
    if rec["bet_line"] == "–¢–ë3":
        win = total >= 4
    else:  # –¢–ë4
        win = total >= 5

    return True, win, gh, ga, st

def make_summary(records):
    """
    –°—á–∏—Ç–∞–µ—Ç —Å–≤–æ–¥–∫—É –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ (—É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –ø–µ—Ä–∏–æ–¥—É).
    –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Ç–æ–≥ –∏ —Å—á–∏—Ç–∞–µ–º P/L.
    """
    played = 0
    wins   = 0
    losses = 0
    pnl    = 0.0
    avg_odds_accum = 0.0
    avg_odds_count = 0

    lines = []
    for i, rec in enumerate(records, 1):
        ok, win, gh, ga, st = settle_one(rec)
        if not ok:
            lines.append(f"#{i:02d} ‚è≥ {rec['home']} ‚Äî {rec['away']} | —Å—Ç–∞—Ç—É—Å: {st or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
            continue

        played += 1
        if win:
            wins += 1
            pnl += STAKE_UNITS
            mark = "‚úÖ‚úÖ‚úÖ"
        else:
            losses += 1
            pnl -= STAKE_UNITS
            mark = "‚ùå‚ùå‚ùå"

        odds_str = f" ({rec['odds']})" if rec.get("odds") else ""

        lines.append(
            f"#{i:02d} {mark} ‚Äî {STAKE_UNITS:+} –µ–¥. "
            f"{rec['country_flag'] if 'country_flag' in rec else ''}"
            f"{odds_str}"
        )

        if rec.get("odds"):
            avg_odds_accum += float(rec["odds"])
            avg_odds_count += 1

    passrate = (wins / played * 100.0) if played else 0.0
    avg_odds = (avg_odds_accum / avg_odds_count) if avg_odds_count else None

    header = [
        f"{wins}‚úÖ / {losses}‚ùå / {played - wins - losses}‚ö™",
        f"üßÆ –ü—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å: {passrate:.0f}%",
        f"üí∞ –ü—Ä–∏–±—ã–ª—å: {pnl:.2f} –µ–¥.",
        f"üß© –°—Ä–µ–¥–Ω–∏–π –∫—Ñ: {avg_odds:.2f}" if avg_odds else "üß© –°—Ä–µ–¥–Ω–∏–π –∫—Ñ: n/a",
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    ]
    return "\n".join(header + lines), played, pnl

def send_daily_report():
    tz = pytz.timezone(TIMEZONE)
    today = now_local().date()

    today_records = []
    for rec in signals:
        ts = rec.get("ts")
        if not ts:
            continue
        dt = datetime.fromtimestamp(ts, tz)
        if dt.date() == today:
            today_records.append(rec)

    title = "üìä *–û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å*"
    body, played, pnl = make_summary(today_records)
    send(f"{title}\n{body}")

def send_weekly_monthly_reports():
    tz = pytz.timezone(TIMEZONE)
    now = now_local()

    # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (–≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è)
    week_start = (now - timedelta(days=6)).date()
    week_records = []
    for rec in signals:
        ts = rec.get("ts")
        if not ts:
            continue
        dt = datetime.fromtimestamp(ts, tz)
        if dt.date() >= week_start:
            week_records.append(rec)
    body_week, _, _ = make_summary(week_records)
    send(f"üìà *–ù–µ–¥–µ–ª—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)*\n{body_week}")

    # —Ç–µ–∫—É—â–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ—Å—è—Ü
    month_start = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    month_records = []
    for rec in signals:
        ts = rec.get("ts")
        if not ts:
            continue
        dt = datetime.fromtimestamp(ts, tz)
        if dt >= month_start:
            month_records.append(rec)
    body_month, _, _ = make_summary(month_records)
    send(f"üìÖ *–ú–µ—Å—è—Ü (—Ç–µ–∫—É—â–∏–π)*\n{body_month}")

# ================== –ö–æ–º–∞–Ω–¥—ã Telegram ==================

@bot.message_handler(commands=['status'])
def cmd_status(message):
    try:
        now = now_local()
        tz = TIMEZONE
        today = now.date()
        today_count = 0
        for rec in signals:
            ts = rec.get("ts")
            if not ts:
                continue
            dt = datetime.fromtimestamp(ts, pytz.timezone(tz))
            if dt.date() == today:
                today_count += 1

        text = [
            "ü©∫ *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞*",
            f"‚è± –í—Ä–µ–º—è (–ª–æ–∫–∞–ª—å–Ω–æ): {now.strftime('%Y-%m-%d %H:%M')}",
            f"üåç TIMEZONE: {TIMEZONE}",
            f"üîé –û–∫–Ω–æ: ~20' (19..22 –º–∏–Ω)",
            f"üéØ –§–∏–ª—å—Ç—Ä –≥–æ–ª–æ–≤: 2/3",
            f"üíµ –ö—Ñ —Ñ–∏–ª—å—Ç—Ä (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω): {ODDS_MIN:.2f}‚Äì{ODDS_MAX:.2f}",
            f"üßæ –°–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_count}",
            f"üìÅ signals.json: {'–µ—Å—Ç—å' if os.path.exists(STATE_FILE) else '–Ω–µ—Ç'}",
        ]
        bot.reply_to(message, "\n".join(text), parse_mode="Markdown")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ /status: {e}")

@bot.message_handler(commands=['report'])
def cmd_report(message):
    try:
        send_daily_report()
        bot.reply_to(message, "üì® –û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ /report: {e}")

@bot.message_handler(commands=['test_signal'])
def cmd_test_signal(message):
    try:
        now = now_local()
        fake = {
            "fixture_id": 999999,
            "home": "Test FC",
            "away": "Debug United",
            "league": "DEBUG League",
            "country": "DEBUG",
            "minute": 20,
            "goals_home": 1,
            "goals_away": 1,
            "total_at_signal": 2,
            "bet_line": "–¢–ë3",
            "odds": 1.75,
            "ts": int(now.timestamp())
        }
        signals.append(fake)
        signaled_ids.add(fake["fixture_id"])
        save_state()
        bot.reply_to(message, "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω (fid=999999). –ó–∞–ø—É—Å—Ç–∏ /report ‚Äî —É–≤–∏–¥–∏—à—å –≤ –æ—Ç—á—ë—Ç–µ.")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ /test_signal: {e}")

# ================== RUN ==================

if __name__ == "__main__":
    # –ü–æ–¥–Ω—è—Ç—å HTTP-—Å–µ—Ä–≤–µ—Ä + –ø—Ä–∏—ë–º TG-–∫–æ–º–∞–Ω–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    Thread(target=run_http,    daemon=True).start()
    Thread(target=run_telebot, daemon=True).start()

    load_state()
    send("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚Äî –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è!")
    send("‚úÖ –†–µ–∂–∏–º: —Å–∏–≥–Ω–∞–ª—ã –ø—Ä–∏ 2/3 –≥–æ–ª–∞—Ö (~20'), –æ—Ç—á—ë—Ç 23:30.\n–ù–µ–¥–µ–ª—å–Ω–∞—è –∏ –º–µ—Å—è—á–Ω–∞—è —Å–≤–æ–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã.")

    while True:
        try:
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–∏–∫ ‚Äî –≤–∏–¥–Ω–æ, —á—Ç–æ —Ü–∏–∫–ª –∂–∏–≤
            log.info(f"Tick: {now_local().strftime('%Y-%m-%d %H:%M')}")

            # –°–∫–∞–Ω–µ—Ä –ª–∞–π–≤–æ–≤
            scan_and_signal()

            # –û—Ç—á—ë—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ–∫–Ω–æ 23:30..23:35)
            now = now_local()
            if now.hour == 23 and 30 <= now.minute <= 35:
                # –¥–Ω–µ–≤–Ω–æ–π
                send_daily_report()

                # –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ: –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º
                if now.weekday() == 6:  # 0=–ü–Ω..6=–í—Å
                    send_weekly_monthly_reports()

                # –æ—á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å
                # (–µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –æ—á–∏—â–∞—Ç—å ‚Äî –º–æ–∂–µ—à—å —É–±—Ä–∞—Ç—å)
                # signals.clear()
                # signaled_ids.clear()
                save_state()

                # —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≤ —ç—Ç–æ–º –∂–µ –æ–∫–Ω–µ
                time.sleep(60)

            time.sleep(POLL_SECONDS)
        except Exception as e:
            log.error(f"Main loop error: {e}")
            time.sleep(POLL_SECONDS)
