# -*- coding: utf-8 -*-
"""
–ë–æ—Ç: –æ–ø—Ä–æ—Å –ª–∞–π–≤–æ–≤ –ø–æ –æ–∫–Ω—É –≤—Ä–µ–º–µ–Ω–∏ + –æ—Ç—á—ë—Ç—ã.
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –æ—Ç—á—ë—Ç—ã –Ω–µ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è (–∞–Ω—Ç–∏-—Å–ø–∞–º –ø–æ –¥–Ω—è–º/–Ω–µ–¥–µ–ª—è–º/–º–µ—Å—è—Ü–∞–º).
"""

import os, sys, time, json, logging
from datetime import datetime, timedelta, date
import pytz, requests, telebot

# ---------- –¥–ª—è Render (healthcheck) ----------
from threading import Thread
from flask import Flask
app = Flask(__name__)

@app.get("/")
def healthcheck():
    return "ok"

def run_http():
    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)
# ---------------------------------------------

# ======= –°–µ–∫—Ä–µ—Ç—ã/–æ–∫—Ä—É–∂–µ–Ω–∏–µ =======
API_TOKEN  = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID    = os.getenv("TELEGRAM_CHAT_ID")
API_KEY    = os.getenv("API_FOOTBALL_KEY")
TIMEZONE   = os.getenv("TZ_NAME", "Europe/Warsaw")  # –æ—Ç—á—ë—Ç—ã –≤ —ç—Ç–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
DISABLE_REPORTS = os.getenv("DISABLE_REPORTS", "0") == "1"

if not API_TOKEN or not CHAT_ID:
    sys.exit("‚ùå TELEGRAM_BOT_TOKEN / TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
CHAT_ID = int(CHAT_ID)

# ======= –ü–∞—Ä–∞–º–µ—Ç—Ä—ã =======
POLL_SECONDS = 300           # 5 –º–∏–Ω—É—Ç
ACTIVE_FROM  = (16, 0)       # 16:00 –ª–æ–∫.
ACTIVE_TILL  = (23, 29)      # 23:29 –ª–æ–∫.
STAKE = 1                    # —É—Å–ª–æ–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤

LOG_FILE   = "bot.log"
STATE_FILE = "signals.json"  # —Ç—É—Ç —Ö—Ä–∞–Ω–∏–º —Å–∏–≥–Ω–∞–ª—ã –∏ –æ—Ç–º–µ—Ç–∫–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç—á—ë—Ç–∞—Ö

# ======= –õ–æ–≥–∏ =======
logging.basicConfig(filename=LOG_FILE, level=logging.INFO,
                    format="%(asctime)s %(levelname)s: %(message)s")
log = logging.getLogger("bot")

bot = telebot.TeleBot(API_TOKEN, parse_mode="Markdown")

API = requests.Session()
if API_KEY:
    API.headers.update({"x-apisports-key": API_KEY})
DEFAULT_TIMEOUT = 12

# ======= –°–æ—Å—Ç–æ—è–Ω–∏–µ (persist) =======
state = {
    # —Å–∏–≥–Ω–∞–ª—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    "signals": [],  # –∫–∞–∂–¥—ã–π: {"ts":"YYYY-MM-DDTHH:MM:SS", "type":"OVER20/UNDER20", "desc":"..."}
    # –∞–Ω—Ç–∏—Å–ø–∞–º-–º–µ—Ç–∫–∏
    "last_daily": "",     # "YYYY-MM-DD"
    "last_weekly": "",    # "YYYY-Www" (ISO week)
    "last_monthly": ""    # "YYYY-MM"
}

def load_state():
    global state
    if os.path.exists(STATE_FILE):
        try:
            with open(STATE_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
            if isinstance(data, dict):
                # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ–±–Ω–æ–≤–∏–º –∫–ª—é—á–∏ (—á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ)
                for k in state.keys():
                    if k in data:
                        state[k] = data[k]
        except Exception as e:
            log.error(f"load_state error: {e}")

def save_state():
    try:
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump(state, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log.error(f"save_state error: {e}")

def tz_now():
    return datetime.now(pytz.timezone(TIMEZONE))

def send(txt: str):
    try:
        bot.send_message(CHAT_ID, txt)
    except Exception as e:
        log.error(f"Telegram send error: {e}")

# ======= –ó–∞–≥–ª—É—à–∫–∏ –ª–æ–≥–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ (–∑–¥–µ—Å—å –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–≥–∏–∫—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è) =======
def in_active_window(now_local: datetime) -> bool:
    hm = (now_local.hour, now_local.minute)
    return (hm >= ACTIVE_FROM) and (hm <= ACTIVE_TILL)

def scan_and_collect_signals():
    """
    –ó–∞–≥–ª—É—à–∫–∞: –∑–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–æ—Å–∞ API –∏ –≤—ã—è–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤.
    –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º, —á—Ç–æ–±—ã —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ—Ç—á—ë—Ç–∞—Ö.
    –ü—Ä–∏–º–µ—Ä, –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª:
    state["signals"].append({
        "ts": tz_now().strftime("%Y-%m-%dT%H:%M:%S"),
        "type": "OVER20",   # –∏–ª–∏ UNDER20
        "desc": "Turkey 2.Lig | 19' 2-0 | –∫—ç—Ñ –Ω–∞ –¢–ë3: 1.60"
    })
    """
    pass

# ======= –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤ =======
def build_day_report(day: date) -> str:
    # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞ –¥–∞—Ç—É day
    day_str = day.strftime("%Y-%m-%d")
    today_signals = [s for s in state["signals"]
                     if s.get("ts","").startswith(day_str)]
    lines = ["üßæ *–û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å*",
             f"–ü–µ—Ä–∏–æ–¥: {day_str}",
             f"–°—Ç–∞–≤–æ–∫: {len(today_signals)}"]
    # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å –≤–∏–Ω/–ª—É–∑, –ø—Ä–æ—Ñ–∏—Ç ‚Äî —Å–µ–π—á–∞—Å –Ω–µ—Ç –∏—Å—Ö–æ–¥–æ–≤ –º–∞—Ç—á–µ–π
    if not today_signals:
        lines.append("–ó–∞ —Å–µ–≥–æ–¥–Ω—è —Å—Ç–∞–≤–æ–∫ –Ω–µ –±—ã–ª–æ.")
        return "\n".join(lines)

    # —Å–≤–æ–¥–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    over = sum(1 for s in today_signals if s.get("type")=="OVER20")
    under= sum(1 for s in today_signals if s.get("type")=="UNDER20")

    lines.append(f"OVER20: {over} | UNDER20: {under}")
    lines.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
    cut = today_signals[-12:]  # –ø–æ–∫–∞–∂–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
    for i,s in enumerate(cut, 1):
        lines.append(f"{i:02d}. {s.get('desc','')}")
    return "\n".join(lines)

def build_week_report(week_date: date) -> str:
    # –Ω–µ–¥–µ–ª—è ISO ‚Äî –≤–æ–∑—å–º—ë–º –ø–µ—Ä–∏–æ–¥ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    iso_year, iso_week, iso_weekday = week_date.isocalendar()
    lines = ["üìÖ *–ù–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞*",
             f"ISO-week: {iso_year}-W{iso_week:02d}"]

    # –Ω–∞–±–∏—Ä–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
    week_signals = []
    for s in state["signals"]:
        try:
            d = datetime.strptime(s["ts"][:10], "%Y-%m-%d").date()
            y, w, wd = d.isocalendar()
            if y==iso_year and w==iso_week:
                week_signals.append(s)
        except Exception:
            pass

    lines.append(f"–°—Ç–∞–≤–æ–∫: {len(week_signals)}")
    if not week_signals:
        lines.append("–ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é —Å—Ç–∞–≤–æ–∫ –Ω–µ –±—ã–ª–æ.")
        return "\n".join(lines)

    over = sum(1 for s in week_signals if s.get("type")=="OVER20")
    under= sum(1 for s in week_signals if s.get("type")=="UNDER20")
    lines.append(f"OVER20: {over} | UNDER20: {under}")
    return "\n".join(lines)

def build_month_report(month_date: date) -> str:
    ym = month_date.strftime("%Y-%m")
    lines = ["üóì *–ú–µ—Å—è—á–Ω–∞—è —Å–≤–æ–¥–∫–∞*",
             f"–ú–µ—Å—è—Ü: {ym}"]

    month_signals = [s for s in state["signals"]
                     if s.get("ts","").startswith(ym)]
    lines.append(f"–°—Ç–∞–≤–æ–∫: {len(month_signals)}")
    if not month_signals:
        lines.append("–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ —Å—Ç–∞–≤–æ–∫ –Ω–µ –±—ã–ª–æ.")
        return "\n".join(lines)

    over = sum(1 for s in month_signals if s.get("type")=="OVER20")
    under= sum(1 for s in month_signals if s.get("type")=="UNDER20")
    lines.append(f"OVER20: {over} | UNDER20: {under}")
    return "\n".join(lines)

# ======= –ê–Ω—Ç–∏-—Å–ø–∞–º –æ—Ç—á—ë—Ç–æ–≤ =======
def maybe_send_reports():
    if DISABLE_REPORTS:
        return

    now = tz_now()
    # –í—Ä–µ–º—è –æ—Ç—á—ë—Ç–∞ ‚Äî —Ä–æ–≤–Ω–æ 23:30
    if not (now.hour == 23 and now.minute == 30):
        return

    # DAILY ‚Äî –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å
    day_key = now.strftime("%Y-%m-%d")
    if state.get("last_daily") != day_key:
        send(build_day_report(now.date()))
        state["last_daily"] = day_key
        save_state()
        # 60 —Å–µ–∫—É–Ω–¥ ¬´—Ç–∏—à–∏–Ω—ã¬ª, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç—É –∂–µ –º–∏–Ω—É—Ç—É
        time.sleep(60)

    # WEEKLY ‚Äî –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º (weekday() == 6)
    if now.weekday() == 6:
        iso_year, iso_week, _ = now.isocalendar()
        week_key = f"{iso_year}-W{iso_week:02d}"
        if state.get("last_weekly") != week_key:
            send(build_week_report(now.date()))
            state["last_weekly"] = week_key
            save_state()
            time.sleep(5)

    # MONTHLY ‚Äî –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    next_day = now.date() + timedelta(days=1)
    if next_day.day == 1:  # –∑–Ω–∞—á–∏—Ç —Å–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
        month_key = now.strftime("%Y-%m")
        if state.get("last_monthly") != month_key:
            send(build_month_report(now.date()))
            state["last_monthly"] = month_key
            save_state()
            time.sleep(5)

# ======= RUN =======
if __name__ == "__main__":
    # HTTP –¥–ª—è Render (Web Service/Free)
    Thread(target=run_http, daemon=True).start()

    load_state()

    send("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚Äî –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è!")
    send("‚úÖ –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ: 16:00‚Äî23:29 (PL), –æ–ø—Ä–æ—Å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.\n–û—Ç—á—ë—Ç—ã ‚Äî –≤ 23:30.")

    while True:
        try:
            now = tz_now()

            # –æ–ø—Ä–æ—Å –º–∞—Ç—á–µ–π —Ç–æ–ª—å–∫–æ –≤ –æ–∫–Ω–µ
            if in_active_window(now):
                scan_and_collect_signals()

            # –æ—Ç—á—ë—Ç—ã —Å –∞–Ω—Ç–∏—Å–ø–∞–º–æ–º
            maybe_send_reports()

            time.sleep(POLL_SECONDS)

        except Exception as e:
            log.error(f"Main loop error: {e}")
            time.sleep(POLL_SECONDS)
