# -*- coding: utf-8 -*-
"""
–°—Ç—Ä–∞—Ç–µ–≥–∏—è: –¥–æ 20' —Å—á—ë—Ç 0‚Äì0 –∏ –∫—ç—Ñ –Ω–∞ –¢–ú 3.0 >= 1.60 ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª.

–û—Ç—á—ë—Ç—ã:
- –î–Ω–µ–≤–Ω–æ–π: 23:30 (Europe/Warsaw)
- –ù–µ–¥–µ–ª—å–Ω—ã–π: –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º –≤ 23:30
- –ú–µ—Å—è—á–Ω—ã–π: –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –≤ 23:30

–û–ø—Ä–æ—Å API —Å—Ç—Ä–æ–≥–æ –ø–æ ¬´–∫–≤–∞—Ä—Ç–∞–ª–∞–º¬ª —á–∞—Å–∞ (00/15/30/45), —á—Ç–æ–±—ã –Ω–µ drift'–∏—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–∏.
–î–ª—è Render –ø–æ–¥–Ω—è—Ç HTTP healthcheck –Ω–∞ '/' —á—Ç–æ–±—ã –¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Å—Ç–∞–Ω—Å –±–æ–¥—Ä—ã–º.

‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: —É—á—Ç—ë–Ω –ü–£–® –¥–ª—è –¢–ú 3.0 ‚Äî –µ—Å–ª–∏ –∏—Ç–æ–≥–æ–≤—ã–π —Ç–æ—Ç–∞–ª —Ä–æ–≤–Ω–æ 3, —Å—á–∏—Ç–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç (‚ôª 0.00).
"""

import os, sys, time, json, logging
from datetime import datetime, timedelta, timezone

import pytz
import requests
import telebot

# ---------- Flask healthcheck (Render friendly) ----------
from threading import Thread
from flask import Flask
app = Flask(__name__)

@app.get("/")
def healthcheck():
    return "ok"

def run_http():
    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)
# ---------------------------------------------------------


# ============== –°–µ–∫—Ä–µ—Ç—ã / –æ–∫—Ä—É–∂–µ–Ω–∏–µ ======================
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID")
API_KEY   = os.getenv("API_FOOTBALL_KEY")
if not API_TOKEN or not CHAT_ID or not API_KEY:
    sys.exit("‚ùå –ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_BOT_TOKEN / TELEGRAM_CHAT_ID / API_FOOTBALL_KEY")
CHAT_ID = int(CHAT_ID)

# ============== –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ======================
TIMEZONE       = "Europe/Warsaw"   # –æ—Ç—á—ë—Ç—ã –ø–æ –ø–æ–ª—å—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
MAX_MINUTE     = 20                # —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ/–≤–∫–ª—é—á–∞—è 20-—é –º–∏–Ω—É—Ç—É
POLL_ALIGN     = True              # –æ–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ 00/15/30/45 (–∏–Ω–∞—á–µ 15 –º–∏–Ω—É—Ç –æ—Ç —Å–Ω–∞)
STAKE_UNITS    = 1                 # —É—Å–ª–æ–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –≤ –æ—Ç—á—ë—Ç–∞—Ö (+1/-1)
LINE_U3        = 3                 # –ª–∏–Ω–∏—è –¢–ú 3.0
ODDS_MIN_U3    = 1.60              # –∫—ç—Ñ –Ω–∞ –¢–ú 3.0 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 1.60

# odds (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—Ñ–æ–≤ –Ω—É–∂–µ–Ω –ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ API-Football)
ODDS_ENABLED         = True        # –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–µ –±—É–¥–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤
ODDS_BOOKMAKER_NAME  = None        # –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –±—É–∫–º–µ–∫–µ—Ä–æ–º (—Å—Ç—Ä–æ–∫–æ–π), –∏–Ω–∞—á–µ –ª—é–±–æ–π

LOG_FILE       = "bot.log"
STATE_FILE     = "signals.json"

# ============== –õ–æ–≥–∏ =====================================
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s %(levelname)s: %(message)s"
)
log = logging.getLogger("u3-00-bot")

# ============== Telegram =================================
bot = telebot.TeleBot(API_TOKEN, parse_mode="Markdown")

def send(text: str):
    try:
        bot.send_message(CHAT_ID, text)
    except Exception as e:
        log.error(f"Telegram send error: {e}")

# ============== API-Football ==============================
API = requests.Session()
API.headers.update({"x-apisports-key": API_KEY})
DEFAULT_TIMEOUT = 15

def get_live():
    try:
        r = API.get("https://v3.football.api-sports.io/fixtures?live=all", timeout=DEFAULT_TIMEOUT)
        r.raise_for_status()
        return r.json().get("response", []) or []
    except Exception as e:
        log.error(f"get_live error: {e}")
        return []

def get_fixture_result(fid: int):
    try:
        r = API.get(f"https://v3.football.api-sports.io/fixtures?id={fid}", timeout=DEFAULT_TIMEOUT)
        r.raise_for_status()
        resp = r.json().get("response", []) or []
        if not resp:
            return None
        m = resp[0]
        st = (m["fixture"]["status"]["short"] or "").upper()
        gh = m["goals"]["home"] or 0
        ga = m["goals"]["away"] or 0
        return st, gh, ga
    except Exception as e:
        log.error(f"get_fixture_result({fid}) error: {e}")
        return None

def get_under3_odds(fid: int):
    """
    –ü—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∞—Ç—å –∫—ç—Ñ –Ω–∞ –¢–ú 3.0.
    –¢—Ä–µ–±—É–µ—Ç odds-–¥–æ—Å—Ç—É–ø –≤ API-Football. –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ –Ω–µ—Ç —Ä—ã–Ω–∫–∞ ‚Äî –≤–µ—Ä–Ω—ë—Ç None.
    """
    if not ODDS_ENABLED:
        return None
    try:
        r = API.get(f"https://v3.football.api-sports.io/odds?fixture={fid}", timeout=DEFAULT_TIMEOUT)
        if r.status_code in (403, 404):
            return None
        r.raise_for_status()
        resp = r.json().get("response", []) or []

        best = None
        for bk in resp:
            b_name = ""
            if isinstance(bk.get("bookmaker"), dict):
                b_name = (bk["bookmaker"].get("name") or "")
            elif "bookmaker" in bk:
                b_name = str(bk.get("bookmaker") or "")
            if ODDS_BOOKMAKER_NAME and ODDS_BOOKMAKER_NAME.lower() not in b_name.lower():
                continue

            for bet in bk.get("bets", []) or []:
                name = (bet.get("name") or "").lower()
                if "over" in name and "under" in name:  # —Ä—ã–Ω–æ–∫ Over/Under
                    for v in bet.get("values", []) or []:
                        val = (v.get("value") or "").replace(" ", "").lower()
                        if val in ("under3", "under3.0"):
                            try:
                                price = float(v.get("odd"))
                                if best is None or price > best:
                                    best = price
                            except Exception:
                                pass
        return best
    except Exception as e:
        log.warning(f"get_under3_odds({fid}) warn: {e}")
        return None

# ============== –°–æ—Å—Ç–æ—è–Ω–∏–µ (–ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫) =========
signals = []          # [{fixture_id, ts_utc, home, away, league, country, minute, goals_home, goals_away, market, line, odds}]
signaled_ids = set()  # —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –º–∞—Ç—á

def save_state():
    try:
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump({"signals": signals, "signaled_ids": list(signaled_ids)}, f, ensure_ascii=False)
    except Exception as e:
        log.error(f"save_state error: {e}")

def load_state():
    global signals, signaled_ids
    if not os.path.exists(STATE_FILE):
        return
    try:
        data = json.load(open(STATE_FILE, "r", encoding="utf-8"))
        signals = data.get("signals", [])
        signaled_ids = set(data.get("signaled_ids", []))
    except Exception as e:
        log.error(f"load_state error: {e}")

# ============== –í—Ä–µ–º—è / —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ========================
def tz():
    return pytz.timezone(TIMEZONE)

def now_local():
    return datetime.now(tz())

def sleep_to_next_quarter():
    """–°–ø–∏–º –¥–æ –±–ª–∏–∂–∞–π—à–∏—Ö 00/15/30/45 –º–∏–Ω—É—Ç."""
    n = now_local()
    q = (n.minute // 15 + 1) * 15
    if q >= 60:
        target = n.replace(minute=0, second=0, microsecond=0) + timedelta(hours=1)
    else:
        target = n.replace(minute=q, second=0, microsecond=0)
    sec = max(1, int((target - n).total_seconds()))
    log.info(f"–°–ø–ª—é –¥–æ {target.strftime('%H:%M')} (~{sec} —Å–µ–∫)")
    time.sleep(sec)

# ============== –°–∫–∞–Ω–µ—Ä: U3 (0-0 –∏ odds >= 1.60) ===========
def scan_u3_with_odds():
    """
    –°–∏–≥–Ω–∞–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
      - elapsed <= 20
      - —Å—á—ë—Ç 0-0
      - odds(–¢–ú 3.0) >= 1.60
    """
    live = get_live()
    for m in live:
        try:
            f = m["fixture"]; t = m["teams"]; g = m["goals"]; L = m["league"]
            fid = f["id"]
            elapsed = int(f["status"]["elapsed"] or 0)
            if elapsed > MAX_MINUTE:
                continue
            if fid in signaled_ids:
                continue

            gh, ga = g["home"] or 0, g["away"] or 0
            if (gh + ga) != 0:
                continue  # –Ω—É–∂–Ω–æ 0-0

            odds_u3 = get_under3_odds(fid)
            if odds_u3 is None:
                log.info(f"fixture={fid} –Ω–µ—Ç –∫—ç—Ñ–∞ U3 ‚Üí –ø—Ä–æ–ø—É—Å–∫")
                continue
            if odds_u3 < ODDS_MIN_U3:
                log.info(f"fixture={fid} –∫—ç—Ñ {odds_u3:.2f} < {ODDS_MIN_U3} ‚Üí –ø—Ä–æ–ø—É—Å–∫")
                continue

            rec = {
                "fixture_id": fid,
                "ts_utc": datetime.utcnow().isoformat(),
                "home": t["home"]["name"], "away": t["away"]["name"],
                "league": L["name"], "country": L["country"],
                "minute": elapsed, "goals_home": gh, "goals_away": ga,
                "market": "under", "line": LINE_U3, "odds": round(float(odds_u3), 2),
            }
            signals.append(rec)
            signaled_ids.add(fid)
            save_state()

            send(
                "‚ö™ *–°–∏–≥–Ω–∞–ª (U3 –Ω–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)*\n"
                f"üèÜ {rec['country']} ‚Äî {rec['league']}\n"
                f"{rec['home']} {gh} ‚Äî {ga} {rec['away']}\n"
                f"‚è± {elapsed}'  |  *–¢–ú {LINE_U3}*  |  –∫—ç—Ñ: *{rec['odds']:.2f}*\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            )
            log.info("Signal U3 sent: fid=%s  %s-%s  min=%d  U3@%.2f",
                     fid, rec['home'], rec['away'], elapsed, rec['odds'])

        except Exception as e:
            log.error(f"scan_u3_with_odds item error: {e}")

# ============== –û—Ç—á—ë—Ç—ã (—Å —É—á—ë—Ç–æ–º –ü–£–®–ê –Ω–∞ 3.0) =============
def summarize_period(items, title):
    """
    +1/0/‚àí1 –µ–¥. –ø—Ä–∏–±—ã–ª–∏:
      - –¢–ú 3.0: win –ø—Ä–∏ —Ç–æ—Ç–∞–ª–µ < 3, push –ø—Ä–∏ —Ç–æ—Ç–∞–ª–µ == 3, loss –ø—Ä–∏ —Ç–æ—Ç–∞–ª–µ > 3.
      - (–µ—Å–ª–∏ –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏—à—å –¥—Ä—É–≥–∏–µ —Ä—ã–Ω–∫–∏ ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –º–æ–∂–Ω–æ —É—á–µ—Å—Ç—å –∏—Ö –ø—Ä–∞–≤–∏–ª–∞)
    """
    total = len(items)
    if total == 0:
        return f"{title}\n–°–µ–≥–æ–¥–Ω—è —Å—Ç–∞–≤–æ–∫ –Ω–µ –±—ã–ª–æ."

    wins = losses = pushes = 0
    lines_out = []

    for i, rec in enumerate(items, 1):
        res = get_fixture_result(rec["fixture_id"])
        if not res:
            lines_out.append(f"#{i:02d} ‚ùì {rec['home']} ‚Äî {rec['away']} | —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            continue

        st, gh, ga = res
        tot = (gh or 0) + (ga or 0)
        market = rec.get("market")
        line = int(rec.get("line", 3))
        odds = rec.get("odds", "n/a")

        if market == "under" and line == 3:
            if tot < 3:
                wins += 1
                pnl = +STAKE_UNITS
                lines_out.append(f"#{i:02d} ‚úÖ +{pnl:.2f} | {rec['home']} {gh}-{ga} {rec['away']} | –¢–ú 3.0 @ {odds}")
            elif tot == 3:
                pushes += 1
                pnl = 0.0
                lines_out.append(f"#{i:02d} ‚ôª {pnl:.2f} | {rec['home']} {gh}-{ga} {rec['away']} | –¢–ú 3.0 @ {odds}")
            else:  # tot > 3
                losses += 1
                pnl = -STAKE_UNITS
                lines_out.append(f"#{i:02d} ‚ùå {pnl:.2f} | {rec['home']} {gh}-{ga} {rec['away']} | –¢–ú 3.0 @ {odds}")
        else:
            # –Ω–∞ –±—É–¥—É—â–µ–µ, –µ—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –¥—Ä—É–≥–∏–µ —Ä—ã–Ω–∫–∏
            ok = tot < line if market == "under" else tot > line
            if ok:
                wins += 1
                pnl = +STAKE_UNITS
                tag = f"–¢–ú {line}" if market == "under" else f"–¢–ë {line}"
                lines_out.append(f"#{i:02d} ‚úÖ +{pnl:.2f} | {rec['home']} {gh}-{ga} {rec['away']} | {tag} @ {odds}")
            else:
                losses += 1
                pnl = -STAKE_UNITS
                tag = f"–¢–ú {line}" if market == "under" else f"–¢–ë {line}"
                lines_out.append(f"#{i:02d} ‚ùå {pnl:.2f} | {rec['home']} {gh}-{ga} {rec['away']} | {tag} @ {odds}")

    profit = wins*STAKE_UNITS - losses*STAKE_UNITS  # –ø—É—à–∏ –ø–æ 0
    played = wins + losses + pushes
    pass_rate = int(round((wins / max(1, wins + losses)) * 100.0))  # —É—Å–ø–µ—Ö–∏ –∏–∑ —Ä–µ—à—ë–Ω–Ω—ã—Ö (–±–µ–∑ –ø—É—à–µ–π)

    head = [
        title,
        f"{wins} ‚úÖ / {losses} ‚ùå / {pushes} ‚ôª",
        f"üìà –ü—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å: {pass_rate}%",
        f"üí∞ –ü—Ä–∏–±—ã–ª—å (–µ–¥.): {profit:.2f}",
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
    ]
    return "\n".join(head + lines_out)

def daily_report():
    tz = pytz.timezone(TIMEZONE)
    today = now_local().date()
    day_items = []
    for r in signals:
        ts = datetime.fromisoformat(r["ts_utc"]).replace(tzinfo=timezone.utc).astimezone(tz)
        if ts.date() == today:
            day_items.append(r)
    send(summarize_period(day_items, "üìÖ *–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç*"))

def weekly_report():
    tz = pytz.timezone(TIMEZONE)
    today = now_local().date()
    start_of_week = today - timedelta(days=today.weekday())  # –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    week_items = []
    for r in signals:
        ts = datetime.fromisoformat(r["ts_utc"]).replace(tzinfo=timezone.utc).astimezone(tz)
        if start_of_week <= ts.date() <= today:
            week_items.append(r)
    send(summarize_period(week_items, "üóì *–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç*"))

def monthly_report():
    tz = pytz.timezone(TIMEZONE)
    today = now_local().date()
    start_of_month = today.replace(day=1)
    month_items = []
    for r in signals:
        ts = datetime.fromisoformat(r["ts_utc"]).replace(tzinfo=timezone.utc).astimezone(tz)
        if start_of_month <= ts.date() <= today:
            month_items.append(r)
    send(summarize_period(month_items, "üìÜ *–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç*"))

def is_last_day_of_month(d):
    return (d + timedelta(days=1)).day == 1

# ============== RUN ======================================
if __name__ == "__main__":
    Thread(target=run_http, daemon=True).start()
    load_state()

    send("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚Äî –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è!")
    send(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –¥–æ 20' —Å—á—ë—Ç 0‚Äì0 ‚Üí *–¢–ú {LINE_U3}*, –∫—ç—Ñ ‚â• *{ODDS_MIN_U3:.2f}* (–ø–æ odds API).\n"
         f"–ü—É—à –Ω–∞ —Ä–æ–≤–Ω–æ–π 3.0 —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ ‚ôª 0.00 –≤ –æ—Ç—á—ë—Ç–∞—Ö.")

    while True:
        try:
            # —Å–∫–∞–Ω
            scan_u3_with_odds()

            # –æ—Ç—á—ë—Ç—ã –≤ 23:30 –ø–æ –í–∞—Ä—à–∞–≤–µ
            now = now_local()
            if now.hour == 23 and now.minute == 30:
                daily_report()
                if now.weekday() == 6:           # –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                    weekly_report()
                if is_last_day_of_month(now.date()):
                    monthly_report()
                time.sleep(60)  # –∞–Ω—Ç–∏–¥—É–±–ª—å

            # —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
            if POLL_ALIGN:
                sleep_to_next_quarter()
            else:
                time.sleep(15 * 60)

        except Exception as e:
            log.error(f"Main loop error: {e}")
            if POLL_ALIGN:
                sleep_to_next_quarter()
            else:
                time.sleep(15 * 60)
