# -*- coding: utf-8 -*-
"""
–ü—Ä–µ–¥–º–∞—Ç—á-—Å–∫–∞–Ω–µ—Ä (API-FOOTBALL):
 - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–∫–∞–Ω –≤ 08:00 –ø–æ TZ (Europe/Warsaw –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).
 - –£—Å–ª–æ–≤–∏—è —Å–∏–≥–Ω–∞–ª–∞:
    1) H2H: –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 –æ—á–Ω—ã—Ö –º–∞—Ç—á–∞—Ö >=2 –±—ã–ª–∏ TB2.5
    2) –§–æ—Ä–º–∞: —É –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 2 –∏–≥—Ä–∞—Ö —Ö–æ—Ç—è –±—ã 1 –º–∞—Ç—á TB2.5
    3) –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç TB2.5: 1.29 <= k <= 2.00 (–±–µ—Ä—ë–º –º–∞–∫—Å–∏–º—É–º –ø–æ –±—É–∫–º–µ–∫–µ—Ä–∞–º)
 - –í 23:30 –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç, –≤ –≤—Å 23:50 –Ω–µ–¥–µ–ª—å–Ω—ã–π, –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ 23:50 ‚Äî –º–µ—Å—è—á–Ω—ã–π.
 - –î–ª—è Render –ø–æ–¥–Ω–∏–º–∞–µ–º HTTP (–∑–¥–æ—Ä–æ–≤—å–µ) –Ω–∞ PORT.
"""

import os, sys, time, json, logging
from datetime import datetime, date, timedelta
import pytz, requests, telebot

# --- Render: HTTP health (–Ω–µ —É–±–∏—Ä–∞–µ–º) ---
from threading import Thread
from flask import Flask
app = Flask(__name__)
@app.get("/")
def health(): return "ok"
def run_http():
    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)

# === –°–µ–∫—Ä–µ—Ç—ã/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
API_TOKEN  = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID    = os.getenv("TELEGRAM_CHAT_ID")
API_KEY    = os.getenv("API_FOOTBALL_KEY")
TIMEZONE   = os.getenv("TZ", "Europe/Warsaw")

if not API_TOKEN or not CHAT_ID or not API_KEY:
    sys.exit("‚ùå –ù–µ—Ç TELEGRAM_BOT_TOKEN / TELEGRAM_CHAT_ID / API_FOOTBALL_KEY")

CHAT_ID = int(CHAT_ID)

# –ü–æ—Ä–æ–≥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ TB2.5
ODDS_MIN = 1.29
ODDS_MAX = 2.00

# H2H: —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±—Ä–∞—Ç—å –∏ —Å–∫–æ–ª—å–∫–æ –∏–∑ –Ω–∏—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å TB2.5
H2H_LAST = 3
H2H_REQUIRE_TB = 2

# –°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π —Ñ–æ—Ä–º—ã –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
FORM_LAST = 2
FORM_REQUIRE_TB = 1   # ¬´–≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 2 ‚Äî —Ö–æ—Ç—è –±—ã 1 TB2.5¬ª

# –ì—Ä–∞—Ñ–∏–∫
SCAN_HH, SCAN_MM = 8, 0     # 08:00
DAILY_HH, DAILY_MM = 23, 30
WEEKLY_HH, WEEKLY_MM = 23, 50
MONTHLY_HH, MONTHLY_MM = 23, 50

# –§–∞–π–ª—ã
LOG_FILE = "bot.log"
STATE_FILE = "signals.json"

logging.basicConfig(filename=LOG_FILE, level=logging.INFO,
                    format="%(asctime)s %(levelname)s: %(message)s")
log = logging.getLogger("prematch")

bot = telebot.TeleBot(API_TOKEN, parse_mode="HTML")

API = requests.Session()
API.headers.update({"x-apisports-key": API_KEY})
DEFAULT_TIMEOUT = 25

# –°–æ—Å—Ç–æ—è–Ω–∏–µ
state = {
    "planned": [],     # [{fixture_id, when_iso, league, home, away, odds, reason}]
    "history": []      # –∑–∞–ø–∏—Å–∏ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
}

# --- –£—Ç–∏–ª–∏—Ç—ã –≤—Ä–µ–º–µ–Ω–∏/—Å–æ—Å—Ç–æ—è–Ω–∏—è ---
def now_local():
    return datetime.now(pytz.timezone(TIMEZONE))

def today_str():
    return now_local().strftime("%Y-%m-%d")

def load_state():
    global state
    if os.path.exists(STATE_FILE):
        try:
            with open(STATE_FILE, "r", encoding="utf-8") as f:
                state = json.load(f)
        except Exception as e:
            log.error(f"load_state: {e}")

def save_state():
    try:
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump(state, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log.error(f"save_state: {e}")

def send(msg):
    try:
        bot.send_message(CHAT_ID, msg)
    except Exception as e:
        log.error(f"Telegram send error: {e}")

# --- –í—ã–∑–æ–≤—ã API-FOOTBALL ---
BASE = "https://v3.football.api-sports.io"

def api_get(path, params):
    try:
        r = API.get(BASE + path, params=params, timeout=DEFAULT_TIMEOUT)
        r.raise_for_status()
        j = r.json()
        return j.get("response", []) or []
    except Exception as e:
        log.error(f"GET {path} {params} error: {e}")
        return []

def fixtures_today():
    return api_get("/fixtures", {"date": today_str(), "status": "NS"})

def h2h_total_goals(home_id, away_id, last_n=H2H_LAST):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ totals –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º h2h –º–∞—Ç—á–∞–º."""
    rows = api_get("/fixtures/headtohead", {"h2h": f"{home_id}-{away_id}", "last": last_n})
    totals = []
    for m in rows:
        gh = m.get("goals", {}).get("home") or 0
        ga = m.get("goals", {}).get("away") or 0
        totals.append(gh+ga)
    return totals

def team_last_totals(team_id, n=FORM_LAST):
    rows = api_get("/fixtures", {"team": team_id, "last": n})
    totals = []
    for m in rows:
        gh = m.get("goals", {}).get("home") or 0
        ga = m.get("goals", {}).get("away") or 0
        totals.append(gh+ga)
    return totals

def get_odds_tb25(fixture_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—É—á—à—É—é (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é) –∫–æ—Ç–∏—Ä–æ–≤–∫—É –Ω–∞ Over 2.5,
    –µ—Å–ª–∏ market=Over/Under –∏ line="2.5" –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç.
    """
    rows = api_get("/odds", {"fixture": fixture_id})
    best = None
    for book in rows:
        bookmakers = book.get("bookmakers") or []
        for bm in bookmakers:
            bets = bm.get("bets") or []
            for bet in bets:
                if (bet.get("name") or "").lower().startswith("over/under"):
                    for v in bet.get("values") or []:
                        line = (v.get("value") or "").strip()
                        odd  = v.get("odd")
                        if line == "Over 2.5" and odd:
                            try:
                                k = float(odd)
                            except:
                                continue
                            if best is None or k > best:
                                best = k
    return best

def fixture_score(fixture_id):
    row = api_get("/fixtures", {"id": fixture_id})
    if not row: 
        return None, None
    m = row[0]
    st = m.get("fixture", {}).get("status", {}).get("short")
    gh = m.get("goals", {}).get("home") or 0
    ga = m.get("goals", {}).get("away") or 0
    return st, gh+ga

# --- –ü—Ä–∞–≤–∏–ª–∞ —Ñ–∏–ª—å—Ç—Ä–∞ ---
def pass_h2h(home_id, away_id):
    totals = h2h_total_goals(home_id, away_id, H2H_LAST)
    tb = sum(1 for t in totals if t >= 3)
    return tb >= H2H_REQUIRE_TB, totals

def pass_form(team_id):
    totals = team_last_totals(team_id, FORM_LAST)
    tb = sum(1 for t in totals if t >= 3)
    return tb >= FORM_REQUIRE_TB, totals

def scan_day():
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –º–∞—Ç—á–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã."""
    fixtures = fixtures_today()
    if not fixtures:
        send("‚ÑπÔ∏è –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–ª–∏ API –ø—É—Å—Ç).")
        return

    cnt_ok = 0
    cnt_total = 0

    for f in fixtures:
        try:
            cnt_total += 1
            fixture_id = f.get("fixture", {}).get("id")
            league = f.get("league", {})
            leageline = f"{league.get('country','')} ‚Äî {league.get('name','')}"
            teams = f.get("teams", {})
            home = teams.get("home", {}).get("name", "Home")
            away = teams.get("away", {}).get("name", "Away")
            hid  = teams.get("home", {}).get("id")
            aid  = teams.get("away", {}).get("id")

            # 1) H2H
            ok_h2h, h2h_totals = pass_h2h(hid, aid)
            if not ok_h2h:
                log.info(f"[{home}-{away}] skip: H2H totals={h2h_totals}")
                continue

            # 2) –§–æ—Ä–º–∞
            ok_form_home, form_h = pass_form(hid)
            ok_form_away, form_a = pass_form(aid)
            if not (ok_form_home and ok_form_away):
                log.info(f"[{home}-{away}] skip: form H={form_h} A={form_a}")
                continue

            # 3) –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã TB2.5
            k = get_odds_tb25(fixture_id)
            if not k:
                log.info(f"[{home}-{away}] skip: –Ω–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ TB2.5 –æ—Ç API")
                continue
            if not (ODDS_MIN <= k <= ODDS_MAX):
                log.info(f"[{home}-{away}] skip: k={k} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
                continue

            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ ‚Äî —Å–∏–≥–Ω–∞–ª ‚úÖ
            cnt_ok += 1
            dt_iso = f.get("fixture", {}).get("date")  # UTC ISO
            state["planned"].append({
                "fixture_id": fixture_id,
                "when_iso": dt_iso,
                "league": leageline,
                "home": home,
                "away": away,
                "odds": k,
                "h2h_totals": h2h_totals,
                "form_home": form_h,
                "form_away": form_a
            })
            save_state()

            msg = (
                "‚öΩ <b>–°–ò–ì–ù–ê–õ (TB2.5)</b>\n"
                f"üèÜ {leageline}\n"
                f"{home} ‚Äî {away}\n"
                f"üïí {dt_iso}\n"
                f"üìä H2H: {h2h_totals} (—Ç—Ä–µ–±: ‚â•{H2H_REQUIRE_TB} –∏–∑ {H2H_LAST} —Å TB2.5)\n"
                f"üìà –§–æ—Ä–º–∞: {home} {form_h}, {away} {form_a}\n"
                f"üí∏ TB2.5: <b>{k:.2f}</b>\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            )
            send(msg)

        except Exception as e:
            log.error(f"scan_day item: {e}")

    send(f"‚úÖ –°–∫–∞–Ω –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: <b>{cnt_ok}</b> –∏–∑ {cnt_total} –º–∞—Ç—á–µ–π.")

def daily_report():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ planned, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç, —á–∏—Å—Ç–∏–º —Å–ø–∏—Å–æ–∫."""
    if not state["planned"]:
        send("üìä –û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å\n–°–µ–≥–æ–¥–Ω—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –±—ã–ª–æ.")
        return

    won = lost = 0
    lines = ["üìä <b>–û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å</b>"]

    for p in state["planned"]:
        fid = p["fixture_id"]; home=p["home"]; away=p["away"]
        st, total = fixture_score(fid)
        if st == "FT":
            if total >= 3:
                won += 1
                lines.append(f"‚úÖ {home} ‚Äî {away} | {total} | TB2.5 OK | k={p['odds']:.2f}")
                state["history"].append({"fid":fid,"res":"W","odds":p["odds"],"when":today_str()})
            else:
                lost += 1
                lines.append(f"‚ùå {home} ‚Äî {away} | {total} | TB2.5 fail | k={p['odds']:.2f}")
                state["history"].append({"fid":fid,"res":"L","odds":p["odds"],"when":today_str()})
        else:
            # –º–∞—Ç—á –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            lines.append(f"‚è≥ {home} ‚Äî {away} | —Å—Ç–∞—Ç—É—Å {st} | –ø–µ—Ä–µ–Ω–æ—Å–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É")
            # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ, –Ω–µ —É–¥–∞–ª—è–µ–º
            continue

    # —É–¥–∞–ª—è–µ–º –∏–∑ planned —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ FT (–∏—Å—Ç–æ—Ä–∏—è —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∞)
    new_planned = []
    for p in state["planned"]:
        st, _ = fixture_score(p["fixture_id"])
        if st != "FT":
            new_planned.append(p)
    state["planned"] = new_planned
    save_state()

    lines.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
    lines.append(f"–ò—Ç–æ–≥–æ: {won} ‚úÖ / {lost} ‚ùå")
    send("\n".join(lines))

def weekly_report():
    """–û—Ç—á—ë—Ç –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 7 –¥–Ω–µ–π."""
    cutoff = date.today() - timedelta(days=7)
    items = [h for h in state["history"]
             if datetime.fromisoformat(h["when"]) .date() >= cutoff]
    if not items:
        send("üìÖ –ù–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return
    w = sum(1 for x in items if x["res"]=="W")
    l = sum(1 for x in items if x["res"]=="L")
    send(f"üìÖ <b>–ù–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞</b>\n–ó–∞ 7 –¥–Ω–µ–π: {w} ‚úÖ / {l} ‚ùå")

def monthly_report():
    """–û—Ç—á—ë—Ç –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü."""
    today = date.today()
    month_items = [h for h in state["history"]
                   if datetime.fromisoformat(h["when"]).date().month == today.month]
    if not month_items:
        send("üóì –ú–µ—Å—è—á–Ω–∞—è —Å–≤–æ–¥–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return
    w = sum(1 for x in month_items if x["res"]=="W")
    l = sum(1 for x in month_items if x["res"]=="L")
    send(f"üóì <b>–ú–µ—Å—è—á–Ω–∞—è —Å–≤–æ–¥–∫–∞</b>\n–ó–∞ –º–µ—Å—è—Ü: {w} ‚úÖ / {l} ‚ùå")

# --- –§–ª–∞–≥–∏, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ ---
sent_flags = {"scan": None, "daily": None, "weekly": None, "monthly": None}

def tick_scheduler():
    """–ï–∂–µ–º–∏–Ω—É—Ç–Ω—ã–π —Ç–∞–π–º–µ—Ä: –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏."""
    tz = pytz.timezone(TIMEZONE)
    now = datetime.now(tz)

    # 08:00 ‚Äî —Å–∫–∞–Ω
    if now.hour==SCAN_HH and now.minute==SCAN_MM:
        k = now.strftime("%Y-%m-%d:%H%M")
        if sent_flags["scan"] != k:
            sent_flags["scan"] = k
            scan_day()

    # 23:30 ‚Äî –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç
    if now.hour==DAILY_HH and now.minute==DAILY_MM:
        k = now.strftime("%Y-%m-%d:%H%M")
        if sent_flags["daily"] != k:
            sent_flags["daily"] = k
            daily_report()

    # –≤—Å 23:50 ‚Äî –Ω–µ–¥–µ–ª—å–Ω—ã–π
    if now.weekday()==6 and now.hour==WEEKLY_HH and now.minute==WEEKLY_MM:
        k = now.strftime("%Y-%m-%d:%H%M")
        if sent_flags["weekly"] != k:
            sent_flags["weekly"] = k
            weekly_report()

    # –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ 23:50 ‚Äî –º–µ—Å—è—á–Ω—ã–π
    tomorrow = now.date() + timedelta(days=1)
    last_day = (tomorrow.day == 1)  # –∑–Ω–∞—á–∏—Ç —Å–µ–≥–æ–¥–Ω—è ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    if last_day and now.hour==MONTHLY_HH and now.minute==MONTHLY_MM:
        k = now.strftime("%Y-%m-%d:%H%M")
        if sent_flags["monthly"] != k:
            sent_flags["monthly"] = k
            monthly_report()

# === RUN ===
if __name__ == "__main__":
    Thread(target=run_http, daemon=True).start()
    load_state()

    send("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (–ø—Ä–µ–¥–º–∞—Ç—á, Render-ready).")
    send(f"‚ÑπÔ∏è –ì—Ä–∞—Ñ–∏–∫: —Å–∫–∞–Ω –≤ {SCAN_HH:02d}:{SCAN_MM:02d}; –æ—Ç—á—ë—Ç {DAILY_HH:02d}:{DAILY_MM:02d}; "
         f"–Ω–µ–¥–µ–ª—è ‚Äî –≤—Å {WEEKLY_HH:02d}:{WEEKLY_MM:02d}; –º–µ—Å—è—Ü ‚Äî –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å {MONTHLY_HH:02d}:{MONTHLY_MM:02d}.")

    # –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ç–ª–µ–≤–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    while True:
        try:
            tick_scheduler()
            time.sleep(60)   # –µ–∂–µ–º–∏–Ω—É—Ç–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        except Exception as e:
            log.error(f"main loop: {e}")
            time.sleep(60)
