# -*- coding: utf-8 -*-
"""
Pre-match bot (API-Football) + —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:
- –°–∫–∞–Ω –≤ 08:00 (Europe/Warsaw) -> —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è+–∑–∞–≤—Ç—Ä–∞:
    1) 3/3 –æ—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á >= 3 –≥–æ–ª–∞
    2) 3/3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã >= 3 –≥–æ–ª–∞
    3) (–æ–ø—Ü–∏—è) –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞ –¢–ë 2.5 >= MIN_ODDS
- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç: 23:30
- –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç: –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 23:50
- –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç: –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ 23:50

ENV:
  TELEGRAM_BOT_TOKEN
  TELEGRAM_CHAT_ID
  API_FOOTBALL_KEY
  TZ (–Ω–∞–ø—Ä–∏–º–µ—Ä Europe/Warsaw; –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Europe/Warsaw)
"""

import os
import sys
import time
import json
import logging
from datetime import datetime, timedelta, date, time as dtime

import pytz
import requests
import telebot

# ==================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ====================

TIMEZONE       = os.getenv("TZ", "Europe/Warsaw")  # –ª–æ–∫–∞–ª—å–Ω–∞—è TZ
SCAN_TIME      = dtime(8, 0)     # 08:00 ‚Äî –æ–¥–∏–Ω –¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≥–æ–Ω
DAILY_TIME     = dtime(23, 30)   # 23:30 ‚Äî –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç
WEEKLY_TIME    = dtime(23, 50)   # 23:50 ‚Äî –Ω–µ–¥–µ–ª—å–Ω—ã–π (–≤—Å)
MONTHLY_TIME   = dtime(23, 50)   # 23:50 ‚Äî –º–µ—Å—è—á–Ω—ã–π (–ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å)

SLEEP_SEC      = 600             # —à–∞–≥ —Ü–∏–∫–ª–∞ 10 –º–∏–Ω (–º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å/—É–º–µ–Ω—å—à–∏—Ç—å)
LOOK_DAYS      = 2               # —Å–∫–∞–Ω–∏—Ä—É–µ–º —Å–µ–≥–æ–¥–Ω—è+–∑–∞–≤—Ç—Ä–∞

# —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫—ç—Ñ—É –Ω–∞ –¢–ë 2.5 (–µ—Å–ª–∏ odds –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –≤–∞—à–µ–º –ø–ª–∞–Ω–µ)
MIN_ODDS_CHECK = True
MIN_ODDS       = 1.70

STAKE_UNIT   = 1.0               # –¥–ª—è –ø—Ä–æ—Ñ–∏—Ç–∞ –≤ –æ—Ç—á—ë—Ç–∞—Ö
LOG_FILE     = "bot.log"
STATE_FILE   = "signals.json"

# ==================== API –∏ —Ç–æ–∫–µ–Ω—ã ====================

API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID")
API_KEY   = os.getenv("API_FOOTBALL_KEY")
if not API_TOKEN or not CHAT_ID or not API_KEY:
    sys.exit("‚ùå –ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_BOT_TOKEN / TELEGRAM_CHAT_ID / API_FOOTBALL_KEY")

CHAT_ID = int(CHAT_ID)

# ==================== –õ–æ–≥–∏ ====================

logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s %(levelname)s: %(message)s"
)
log = logging.getLogger("prematch-bot")

# ==================== Telegram ====================

bot = telebot.TeleBot(API_TOKEN, parse_mode="Markdown")

def send(text: str):
    try:
        bot.send_message(CHAT_ID, text)
    except Exception as e:
        log.error("Telegram send error: %s", e)

# ==================== API-Football ====================

API = requests.Session()
API.headers.update({"x-apisports-key": API_KEY})
DEFAULT_TIMEOUT = 20

def api_get(path, params=None):
    url = f"https://v3.football.api-sports.io/{path}"
    try:
        r = API.get(url, params=params or {}, timeout=DEFAULT_TIMEOUT)
        if r.status_code != 200:
            log.warning("HTTP %s for %s %s", r.status_code, path, r.text[:200])
        r.raise_for_status()
        data = r.json()
        return data.get("response", []) or []
    except Exception as e:
        log.error("api_get %s error: %s", path, e)
        return []

def get_fixtures_by_date(date_str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ –Ω–∞—á–∞—Ç—ã–µ (NS) –º–∞—Ç—á–∏ –Ω–∞ –¥–∞—Ç—É."""
    resp = api_get("fixtures", {"date": date_str})
    return [m for m in resp if m["fixture"]["status"]["short"] == "NS"]

def total_goals(m) -> int:
    try:
        gh = m["goals"]["home"] or 0
        ga = m["goals"]["away"] or 0
        return int(gh) + int(ga)
    except Exception:
        return 0

def get_h2h_last3_over3(home_id: int, away_id: int) -> bool:
    resp = api_get("fixtures/headtohead", {"h2h": f"{home_id}-{away_id}", "last": 3})
    return len(resp) >= 3 and all(total_goals(x) >= 3 for x in resp)

def get_team_last3_over3(team_id: int) -> bool:
    resp = api_get("fixtures", {"team": team_id, "last": 3})
    return len(resp) >= 3 and all(total_goals(x) >= 3 for x in resp)

def get_over25_odds(fixture_id: int):
    """–ü—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å –∫—ç—Ñ –Ω–∞ Over 2.5 (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)."""
    resp = api_get("odds", {"fixture": fixture_id})
    try:
        for market in resp:
            for bm in market.get("bookmakers", []):
                for b in bm.get("bets", []):
                    name = (b.get("name") or "").lower()
                    if "over/under" in name:
                        for v in b.get("values", []):
                            val = (v.get("value") or "").strip().lower()
                            if "over 2.5" in val:
                                odd_str = v.get("odd")
                                if odd_str:
                                    return float(odd_str.replace(",", "."))
        return None
    except Exception as e:
        log.error("get_over25_odds error for fixture %s: %s", fixture_id, e)
        return None

def get_fixture_by_id(fid: int):
    resp = api_get("fixtures", {"id": fid})
    return resp[0] if resp else None

# ==================== –í—Ä–µ–º—è/—É—Ç–∏–ª–∏—Ç—ã ====================

def tz(): return pytz.timezone(TIMEZONE)
def now_local(): return datetime.now(tz())

def fmt_dt_utc_to_local(utc_iso: str) -> str:
    try:
        dt = datetime.fromisoformat(utc_iso.replace("Z", "+00:00"))
        local = dt.astimezone(tz())
        return local.strftime("%d.%m %H:%M")
    except Exception:
        return utc_iso

def is_last_day_of_month(d: date) -> bool:
    return (d + timedelta(days=1)).day == 1

# ==================== –°–æ—Å—Ç–æ—è–Ω–∏–µ ====================

state = {
    "signaled_fixtures": [],  # fixture_id —É–∂–µ —Å–∏–≥–Ω–∞–ª–µ–Ω
    "signals": [],            # –∏—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
    "last_scan_date": "",     # YYYY-MM-DD ‚Äî –∫–æ–≥–¥–∞ —Å–¥–µ–ª–∞–ª–∏ –¥–Ω–µ–≤–Ω–æ–π —Å–∫–∞–Ω
    "last_daily": "",         # YYYY-MM-DD ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç
    "last_weekly": "",        # YYYY-WW ‚Äî –ø–æ—Å–ª–µ–¥–Ω—è—è ISO-–Ω–µ–¥–µ–ª—è –æ—Ç—á—ë—Ç–∞
    "last_monthly": ""        # YYYY-MM ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç
}

def load_state():
    global state
    if not os.path.exists(STATE_FILE): return
    try:
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        if isinstance(data, dict):
            for k in state.keys():
                if k in data: state[k] = data[k]
    except Exception as e:
        log.error("load_state error: %s", e)

def save_state():
    try:
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump(state, f, ensure_ascii=False)
    except Exception as e:
        log.error("save_state error: %s", e)

# ==================== –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ —Å–∏–≥–Ω–∞–ª—ã ====================

def should_signal_fixture(m) -> tuple[bool, dict]:
    f = m["fixture"]; t = m["teams"]; L = m["league"]
    fid      = f["id"]
    home     = t["home"]["name"]
    away     = t["away"]["name"]
    home_id  = t["home"]["id"]
    away_id  = t["away"]["id"]
    league   = L["name"]
    country  = L["country"]
    kickoff  = fmt_dt_utc_to_local(f["date"])

    if not get_h2h_last3_over3(home_id, away_id): return False, {}
    if not get_team_last3_over3(home_id): return False, {}
    if not get_team_last3_over3(away_id): return False, {}

    odds = get_over25_odds(fid)
    if MIN_ODDS_CHECK and (odds is not None) and odds < MIN_ODDS:
        return False, {}

    info = {
        "fixture_id": fid, "home": home, "away": away,
        "league": league, "country": country,
        "kickoff": kickoff, "odds_over25": odds
    }
    return True, info

def build_signal_message(info: dict) -> str:
    odds_txt = f"{info['odds_over25']:.2f}" if info["odds_over25"] is not None else "–Ω/–¥"
    return (
        "üì¢ *–ü—Ä–µ-–º–∞—Ç—á —Å–∏–≥–Ω–∞–ª*\n"
        f"üèÜ {info['country']} ‚Äî {info['league']}\n"
        f"‚öΩ {info['home']} ‚Äî {info['away']}\n"
        f"üïí –ù–∞—á–∞–ª–æ: {info['kickoff']} ({TIMEZONE})\n\n"
        "–£—Å–ª–æ–≤–∏—è:\n"
        "‚Ä¢ 3/3 –æ—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á: —Ç–æ—Ç–∞–ª ‚â• 3\n"
        "‚Ä¢ 3/3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã: —Ç–æ—Ç–∞–ª ‚â• 3\n\n"
        f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: *–¢–ë 2.5*  @ *{odds_txt}*\n"
        f"ID: `{info['fixture_id']}`"
    )

def scan_upcoming_and_signal():
    # —Å–µ–≥–æ–¥–Ω—è + –∑–∞–≤—Ç—Ä–∞
    dates = []
    now = now_local()
    for d in range(LOOK_DAYS):
        dates.append((now + timedelta(days=d)).strftime("%Y-%m-%d"))

    fixtures = []
    for ds in dates:
        fixtures.extend(get_fixtures_by_date(ds))

    new_cnt = 0
    for m in fixtures:
        fid = m["fixture"]["id"]
        if fid in state["signaled_fixtures"]:
            continue
        ok, info = should_signal_fixture(m)
        if not ok: continue

        send(build_signal_message(info))
        state["signaled_fixtures"].append(fid)

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤/—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        state["signals"].append({
            "fixture_id": info["fixture_id"],
            "date_signal": now.strftime("%Y-%m-%d"),  # –ª–æ–∫–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –æ—Ç–ø—Ä–∞–≤–∫–∏
            "home": info["home"], "away": info["away"],
            "league": info["league"], "country": info["country"],
            "kickoff": info["kickoff"],
            "odds": info["odds_over25"],
            "bet": "OVER25",
            "result": None,          # WIN/LOSE/None
            "final_total": None,
            "closed": False
        })
        new_cnt += 1

    if new_cnt:
        save_state()
        log.info("New signals: %s", new_cnt)

# ==================== –ü–æ—Å–ª–µ—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ====================

def settle_open_signals():
    changed = False
    for s in state["signals"]:
        if s.get("closed"): continue
        m = get_fixture_by_id(s["fixture_id"])
        if not m: continue
        status = (m["fixture"]["status"]["short"] or "")
        if status in ("FT", "AET", "PEN"):
            tot = total_goals(m)
            s["final_total"] = tot
            s["result"] = "WIN" if tot >= 3 else "LOSE"
            s["closed"] = True
            changed = True
    if changed:
        save_state()
        log.info("Settled signals")

# ==================== –û—Ç—á—ë—Ç—ã ====================

def calc_profit(odds, result) -> float:
    if result == "WIN":
        return (float(odds) - 1.0) if odds is not None else 1.0
    if result == "LOSE":
        return -1.0
    return 0.0

def build_report(signals):
    n = len(signals)
    wins = sum(1 for s in signals if s.get("result") == "WIN")
    loses = sum(1 for s in signals if s.get("result") == "LOSE")
    pend = sum(1 for s in signals if s.get("result") is None)
    winrate = (wins / max(1, wins + loses)) * 100.0
    profit = sum(calc_profit(s.get("odds"), s.get("result")) for s in signals if s.get("result") is not None)
    lines = [
        f"–°—Ç–∞–≤–æ–∫: {n}, –í–∏–Ω: {wins}, –õ—É–∑: {loses}, –ù/–¥: {pend}",
        f"–ü—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å: {winrate:.1f}%",
        f"–ü—Ä–æ—Ñ–∏—Ç (—Å—Ç–∞–≤–∫–∞=1): {profit:+.2f}"
    ]
    return "\n".join(lines)

def send_daily_report(now):
    key = now.strftime("%Y-%m-%d")
    if state.get("last_daily") == key: return
    todays = [s for s in state["signals"] if s.get("date_signal") == key]
    text = "üìä *–û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å*\n" + (build_report(todays) if todays else "–ó–∞ —Å–µ–≥–æ–¥–Ω—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –±—ã–ª–æ.")
    send(text)
    state["last_daily"] = key
    save_state()

def send_weekly_report(now):
    # —Ç–æ–ª—å–∫–æ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º
    if now.weekday() != 6: return
    y, w, _ = now.isocalendar()
    key = f"{y}-{w:02d}"
    if state.get("last_weekly") == key: return
    # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–∞—Ç
    period = set()
    cur = now.date() - timedelta(days=6)
    for _ in range(7):
        period.add(cur.strftime("%Y-%m-%d"))
        cur += timedelta(days=1)
    week_sigs = [s for s in state["signals"] if s.get("date_signal") in period]
    text = "üìÖ *–ù–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞*\n" + (build_report(week_sigs) if week_sigs else "–°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –±—ã–ª–æ.")
    send(text)
    state["last_weekly"] = key
    save_state()

def send_monthly_report(now):
    # —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    if not is_last_day_of_month(now.date()): return
    key = now.strftime("%Y-%m")
    if state.get("last_monthly") == key: return
    month_key = now.strftime("%Y-%m")
    month_sigs = [s for s in state["signals"] if (s.get("date_signal") or "").startswith(month_key)]
    text = "üóì *–ú–µ—Å—è—á–Ω–∞—è —Å–≤–æ–¥–∫–∞*\n" + (build_report(month_sigs) if month_sigs else "–°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –±—ã–ª–æ.")
    send(text)
    state["last_monthly"] = key
    save_state()

# ==================== –¢—Ä–∏–≥–≥–µ—Ä—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ====================

def should_run_once_per_day(now: datetime, at_time: dtime, last_key_name: str) -> bool:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ "–æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å –ø–æ—Å–ª–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏".
    –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è SCAN (08:00) –∏ DAILY (23:30).
    last_key_name: 'last_scan_date' –∏–ª–∏ 'last_daily'
    """
    today = now.strftime("%Y-%m-%d")
    if state.get(last_key_name) == today:  # —É–∂–µ –¥–µ–ª–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è
        return False
    return now.time() >= at_time

# ==================== RUN ====================

if __name__ == "__main__":
    load_state()

    send(
        "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (–ø—Ä–µ–º–∞—Ç—á H2H+—Ñ–æ—Ä–º–∞ ‚â•3).\n"
        f"üïó –°–∫–∞–Ω: {SCAN_TIME.strftime('%H:%M')}  |  üóì TZ: {TIMEZONE}\n"
        f"üìÖ –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç: {DAILY_TIME.strftime('%H:%M')}\n"
        f"üìÖ –ù–µ–¥–µ–ª—å–Ω—ã–π: –≤—Å {WEEKLY_TIME.strftime('%H:%M')}  |  –ú–µ—Å—è—á–Ω—ã–π: {MONTHLY_TIME.strftime('%H:%M')}\n"
        + (f"üîé –§–∏–ª—å—Ç—Ä –ø–æ –∫—ç—Ñ –¢–ë2.5: ‚â• {MIN_ODDS:.2f}" if MIN_ODDS_CHECK else "üîé –§–∏–ª—å—Ç—Ä –ø–æ –∫—ç—Ñ –¢–ë2.5: –æ—Ç–∫–ª—é—á—ë–Ω.")
    )

    while True:
        try:
            now = now_local()

            # 1) –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –°–ö–ê–ù –≤ 08:00 (–æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å)
            if should_run_once_per_day(now, SCAN_TIME, "last_scan_date"):
                scan_upcoming_and_signal()
                state["last_scan_date"] = now.strftime("%Y-%m-%d")
                save_state()

            # 2) –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω–æ–≥–¥–∞ (–∫–∞–∂–¥—ã–π —á–∞—Å –≤ :00)
            if now.minute == 0:
                settle_open_signals()

            # 3) –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç 23:30 (–æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å)
            if now.time().hour == DAILY_TIME.hour and now.time().minute == DAILY_TIME.minute:
                send_daily_report(now)
                time.sleep(60)  # –∞–Ω—Ç–∏-–¥—É–±–ª—å –Ω–∞ —ç—Ç—É –∂–µ –º–∏–Ω—É—Ç—É

            # 4) –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –≤—Å 23:50
            if now.time().hour == WEEKLY_TIME.hour and now.time().minute == WEEKLY_TIME.minute:
                send_weekly_report(now)
                time.sleep(60)

            # 5) –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å) 23:50
            if now.time().hour == MONTHLY_TIME.hour and now.time().minute == MONTHLY_TIME.minute:
                send_monthly_report(now)
                time.sleep(60)

            time.sleep(SLEEP_SEC)

        except Exception as e:
            log.error("Main loop error: %s", e)
            time.sleep(SLEEP_SEC)
