# -*- coding: utf-8 -*-
"""
–≠–∫–æ–Ω–æ–º-–±–æ—Ç: —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ ~20' (—Ä–æ–≤–Ω–æ 2 –≥–æ–ª–∞) + –æ—Ç—á—ë—Ç –≤ 23:30 —Å –ø—Ä–∏–±—ã–ª—å—é.
‚Äî –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç: 1 –∑–∞–ø—Ä–æ—Å /fixtures?live=all
‚Äî –°–∏–≥–Ω–∞–ª—ã: —Ç–æ–ª—å–∫–æ –Ω–∞ ~20'
‚Äî –í –æ—Ç—á—ë—Ç–µ: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ 1 –∑–∞–ø—Ä–æ—Å /fixtures?id=... —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç
"""

import os, sys, time, json, logging
from datetime import datetime
import pytz, requests, telebot

# ===== –°–µ–∫—Ä–µ—Ç—ã –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è =====
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID")
API_KEY   = os.getenv("API_FOOTBALL_KEY")
TIMEZONE  = "Europe/Minsk"
if not API_TOKEN or not CHAT_ID or not API_KEY:
    sys.exit("‚ùå –ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_BOT_TOKEN / TELEGRAM_CHAT_ID / API_FOOTBALL_KEY")
CHAT_ID = int(CHAT_ID)

# ===== –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫–æ–Ω–æ–º-—Ä–µ–∂–∏–º–∞ =====
POLL_SECONDS = 15 * 60              # 1 –∑–∞–ø—Ä–æ—Å —Ä–∞–∑ –≤ 15 –º–∏–Ω—É—Ç ‚âà 96/—Å—É—Ç–∫–∏
WINDOW_20 = range(19, 23)           # —Å—á–∏—Ç–∞–µ–º ¬´–æ–∫–æ–ª–æ 20'¬ª

# ===== –õ–æ–≥–∏/—Ñ–∞–π–ª—ã =====
LOG_FILE = "bot.log"
SIGNALS_FILE = "signals.json"       # —Ö—Ä–∞–Ω–∏–º —Å–∏–≥–Ω–∞–ª—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å

logging.basicConfig(filename=LOG_FILE, level=logging.INFO,
                    format="%(asctime)s %(levelname)s: %(message)s")
log = logging.getLogger("econ-bot")

bot = telebot.TeleBot(API_TOKEN, parse_mode="Markdown")

API = requests.Session()
API.headers.update({"x-apisports-key": API_KEY})
DEFAULT_TIMEOUT = 15

# –ü–∞–º—è—Ç—å –∑–∞ –¥–µ–Ω—å
signals = []          # [{fixture_id, home, away, league, country, minute, goals_home, goals_away}]
signaled_ids = set()  # —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª

# ===== –£—Ç–∏–ª–∏—Ç—ã =====
def now_local():
    return datetime.now(pytz.timezone(TIMEZONE))

def send(text: str):
    try:
        bot.send_message(CHAT_ID, text)
    except Exception as e:
        log.error(f"Telegram send error: {e}")

def save_state():
    try:
        with open(SIGNALS_FILE, "w", encoding="utf-8") as f:
            json.dump({"signals": signals, "signaled_ids": list(signaled_ids)}, f, ensure_ascii=False)
    except Exception as e:
        log.error(f"save_state error: {e}")

def load_state():
    global signals, signaled_ids
    if not os.path.exists(SIGNALS_FILE):
        return
    try:
        data = json.load(open(SIGNALS_FILE, "r", encoding="utf-8"))
        signals = data.get("signals", [])
        signaled_ids = set(data.get("signaled_ids", []))
    except Exception as e:
        log.error(f"load_state error: {e}")

def get_live():
    """1 –∑–∞–ø—Ä–æ—Å ‚Äî –≤—Å–µ –ª–∞–π–≤—ã"""
    try:
        r = API.get("https://v3.football.api-sports.io/fixtures?live=all", timeout=DEFAULT_TIMEOUT)
        if r.status_code != 200:
            log.warning("fixtures HTTP %s %s", r.status_code, r.text[:160])
        r.raise_for_status()
        return r.json().get("response", []) or []
    except Exception as e:
        log.error(f"get_live error: {e}")
        return []

def get_fixture_result(fid: int):
    """1 –∑–∞–ø—Ä–æ—Å ‚Äî –∏—Ç–æ–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞"""
    try:
        r = API.get(f"https://v3.football.api-sports.io/fixtures?id={fid}", timeout=DEFAULT_TIMEOUT)
        r.raise_for_status()
        resp = r.json().get("response", []) or []
        if not resp:
            return None
        m = resp[0]
        st = m["fixture"]["status"]["short"]
        gh = m["goals"]["home"] or 0
        ga = m["goals"]["away"] or 0
        return st, gh, ga
    except Exception as e:
        log.error(f"get_fixture_result({fid}) error: {e}")
        return None

# ===== –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ =====
def scan_and_signal():
    live = get_live()
    for m in live:
        try:
            f = m["fixture"]; t = m["teams"]; g = m["goals"]; L = m["league"]
            fid = f["id"]
            elapsed = f["status"]["elapsed"] or 0
            if fid in signaled_ids:
                continue
            if elapsed in WINDOW_20:
                gh, ga = g["home"] or 0, g["away"] or 0
                if gh + ga == 2:
                    # –°–∏–≥–Ω–∞–ª ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏ —à–ª—ë–º
                    rec = {
                        "fixture_id": fid,
                        "home": t["home"]["name"],
                        "away": t["away"]["name"],
                        "league": L["name"],
                        "country": L["country"],
                        "minute": int(elapsed),
                        "goals_home": gh,
                        "goals_away": ga,
                    }
                    signals.append(rec)
                    signaled_ids.add(fid)
                    save_state()

                    send(
                        "‚ö™ *–°—Ç–∞–≤–∫–∞!*\n"
                        f"üèÜ {rec['country']} ‚Äî {rec['league']}\n"
                        f"{rec['home']} {gh} ‚Äî {ga} {rec['away']}\n"
                        f"‚è± ~{elapsed}'  (—É—Å–ª–æ–≤–∏–µ: —Ä–æ–≤–Ω–æ 2 –≥–æ–ª–∞)\n"
                        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                    )
                    log.info("Signal sent for %s - %s (fid=%s)", rec['home'], rec['away'], fid)
        except Exception as e:
            log.error(f"scan_and_signal item error: {e}")

def send_daily_report():
    """–í 23:30: –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º, –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏—Ç–æ–≥ –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞ –∏ –ø–æ—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–±—ã–ª—å."""
    played = not_played = 0
    profit = 0.0
    lines = ["üìä *–û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å*"]

    for rec in signals:
        res = get_fixture_result(rec["fixture_id"])
        if not res:
            lines.append(f"{rec['home']} ‚Äî {rec['away']} | —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            continue
        st, gh, ga = res
        total = gh + ga
        if st == "FT":
            if total > 3:
                played += 1
                pnl = +1.0  # —Å—á–∏—Ç–∞–µ–º –ø—Ä–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–µ 1 –µ–¥. –ø—Ä–∏–±—ã–ª–∏
                lines.append(f"{rec['home']} {gh}-{ga} {rec['away']} | ‚úÖ –°—ã–≥—Ä–∞–ª–æ | +{pnl:.2f}")
            else:
                not_played += 1
                pnl = -1.0
                lines.append(f"{rec['home']} {gh}-{ga} {rec['away']} | ‚ùå –ù–µ —Å—ã–≥—Ä–∞–ª–æ | {pnl:.2f}")
            profit += pnl
        else:
            lines.append(f"{rec['home']} ‚Äî {rec['away']} | —Å—Ç–∞—Ç—É—Å: {st}")

    lines.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
    lines.append(f"–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: {len(signals)}")
    lines.append(f"–°—ã–≥—Ä–∞–ª–æ: {played}  |  –ù–µ —Å—ã–≥—Ä–∞–ª–æ: {not_played}")
    lines.append(f"–ò—Ç–æ–≥: {profit:+.2f}")

    send("\n".join(lines))

# ===== RUN =====
if __name__ == "__main__":
    load_state()
    send("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚Äî –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è!")
    send("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (—ç–∫–æ–Ω–æ–º: —Å–∏–≥–Ω–∞–ª –Ω–∞ ~20', –æ—Ç—á—ë—Ç –≤ 23:30).")
    while True:
        ...
        try:
            scan_and_signal()

            # –†–∞–∑–æ–≤—ã–π –æ—Ç—á—ë—Ç –≤ 23:30 –ø–æ –ú–∏–Ω—Å–∫—É
            now = now_local()
            if now.hour == 23 and now.minute == 30:
                send_daily_report()
                # –æ—á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å
                signals.clear()
                signaled_ids.clear()
                save_state()
                time.sleep(60)  # —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –¥–≤–∞–∂–¥—ã –≤ —Ç—É –∂–µ –º–∏–Ω—É—Ç—É

            time.sleep(POLL_SECONDS)
        except Exception as e:
            log.error(f"Main loop error: {e}")
            time.sleep(POLL_SECONDS)
