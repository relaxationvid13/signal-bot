# -*- coding: utf-8 -*-
"""
–ü—Ä–µ–¥–º–∞—Ç—á-–±–æ—Ç (Render-ready, Web Service Free).
–°—Ç—Ä–∞—Ç–µ–≥–∏—è:
  ‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—á–Ω—ã–π –º–∞—Ç—á ‚Äî –¢–ë 2.5
  ‚úÖ –î–≤–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–∞ –ö–ê–ñ–î–û–ô –∫–æ–º–∞–Ω–¥—ã ‚Äî –¢–ë 2.5
  ‚úÖ (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫—ç—Ñ—É –Ω–∞ –¢–ë2.5 –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [ODDS_MIN, ODDS_MAX]

–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (Europe/Warsaw):
  - 08:00 ‚Äî —Å–∫–∞–Ω –∫–∞—Ä—Ç–æ—á–∫–∏ –º–∞—Ç—á–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
  - 23:30 ‚Äî –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç
  - –í—Å 23:50 ‚Äî –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
  - –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ 23:50 ‚Äî –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç
"""

import os, sys, time, json, logging, math
from datetime import datetime, timedelta, date
from threading import Thread

import pytz
import requests
import telebot
from flask import Flask

# ----------------- Mini web (Render port binding) -----------------
app = Flask(__name__)
@app.get("/")
def health():
    return "ok"  # Render needs an open port to keep process alive
def run_http():
    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)
# ------------------------------------------------------------------

# ================= –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =================
API_TOKEN   = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID     = os.getenv("TELEGRAM_CHAT_ID")
API_KEY     = os.getenv("API_FOOTBALL_KEY")
TIMEZONE    = os.getenv("TZ", "Europe/Warsaw")

if not API_TOKEN or not CHAT_ID or not API_KEY:
    sys.exit("‚ùå env vars required: TELEGRAM_BOT_TOKEN / TELEGRAM_CHAT_ID / API_FOOTBALL_KEY")

CHAT_ID = int(CHAT_ID)

# –ü–æ—Ä–æ–≥ –∫—ç—Ñ–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ). –ï—Å–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å None ‚Äî —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫—ç—Ñ—É –æ—Ç–∫–ª—é—á—ë–Ω.
def _get_float_or_none(name, default=None):
    v = os.getenv(name, "")
    try:
        return float(v) if v else default
    except Exception:
        return default

ODDS_MIN = _get_float_or_none("ODDS_MIN", None)  # –Ω–∞–ø—Ä. 1.29
ODDS_MAX = _get_float_or_none("ODDS_MAX", None)  # –Ω–∞–ø—Ä. 2.00

# –í—Ä–µ–º—è —Ü–∏–∫–ª–∞ –±–æ—Ç–∞: –¥–µ—Ä–∂–∏–º –Ω–µ–≤—ã—Å–æ–∫–∏–º, –æ–Ω —Å–∞–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç ¬´—á–∞—Å—ã¬ª
LOOP_SECONDS = 60

# –§–∞–π–ª—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è/–ª–æ–≥–æ–≤
LOG_FILE   = "bot.log"
STATE_FILE = "signals.json"

# ================= –õ–æ–≥–∏ =================
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s %(levelname)s: %(message)s"
)
log = logging.getLogger("prematch-bot")

# ================= Telegram =================
bot = telebot.TeleBot(API_TOKEN, parse_mode="Markdown")

def now_local():
    return datetime.now(pytz.timezone(TIMEZONE))

def send(msg: str):
    try:
        bot.send_message(CHAT_ID, msg)
    except Exception as e:
        log.error(f"Telegram send error: {e}")

# ================= API-Football =================
API = requests.Session()
API.headers.update({"x-apisports-key": API_KEY})
DEFAULT_TIMEOUT = 15

def api_get(url, params=None):
    try:
        r = API.get(url, params=params or {}, timeout=DEFAULT_TIMEOUT)
        if r.status_code != 200:
            log.warning("HTTP %s %s", r.status_code, r.text[:160])
        r.raise_for_status()
        return r.json()
    except Exception as e:
        log.error(f"api_get error: {e}")
        return None

def goals_total_from_fixture(m):
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (home_goals, away_goals, total) –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –º–∞—Ç—á–∞ API-Football. """
    try:
        gh = m["goals"]["home"] or 0
        ga = m["goals"]["away"] or 0
        return gh, ga, gh + ga
    except Exception:
        return 0, 0, None

def is_tb25_total(total):
    return (total is not None) and (total >= 3)

def odds_over25_for_fixture(fixture_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—Ñ –Ω–∞ –¢–ë2.5 (float) –∏–ª–∏ None.
    –ò—â–µ–º market "Over/Under", line "2.5" / outcome "Over".
    """
    url = "https://v3.football.api-sports.io/odds"
    data = api_get(url, {"fixture": fixture_id})
    if not data: 
        return None
    resp = data.get("response", []) or []
    for book in resp:
        for market in book.get("bookmakers", []):
            for mark in market.get("bets", []):
                if (mark.get("name", "").lower() in ("over/under", "ou", "over under")):
                    for v in mark.get("values", []):
                        ln = v.get("value", "").replace(" ", "")
                        if ln in ("Over2.5", "2.5", "Over 2.5"):
                            try:
                                return float(v.get("odd"))
                            except Exception:
                                continue
    return None

def last_h2h_is_tb25(home_id, away_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –ü–û–°–õ–ï–î–ù–ò–ô –æ—á–Ω—ã–π –º–∞—Ç—á => –¢–ë2.5?
    """
    url = "https://v3.football.api-sports.io/fixtures/headtohead"
    data = api_get(url, {"h2h": f"{home_id}-{away_id}", "last": 1})
    if not data: 
        return False
    resp = data.get("response", []) or []
    if not resp:
        return False
    gh, ga, tot = goals_total_from_fixture(resp[0])
    return is_tb25_total(tot)

def last_k_is_tb25_for_team(team_id, k=2):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º: —É –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ k –º–∞—Ç—á–µ–π ‚Äî –¢–ë2.5?
    """
    url = "https://v3.football.api-sports.io/fixtures"
    data = api_get(url, {"team": team_id, "last": k})
    if not data:
        return False
    resp = data.get("response", []) or []
    if len(resp) < k:
        return False
    for m in resp:
        gh, ga, tot = goals_total_from_fixture(m)
        if not is_tb25_total(tot):
            return False
    return True

# ================= –°–æ—Å—Ç–æ—è–Ω–∏–µ (—Å–∏–≥–Ω–∞–ª—ã/—Å—Ç–∞–≤–∫–∏) =================
STATE = {
    "signals": [],        # —Å–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    "history": []         # –∞—Ä—Ö–∏–≤ (–¥–ª—è –Ω–µ–¥–µ–ª–∏/–º–µ—Å—è—Ü–∞)
}

def load_state():
    global STATE
    if os.path.exists(STATE_FILE):
        try:
            STATE = json.load(open(STATE_FILE, "r", encoding="utf-8"))
        except Exception as e:
            log.error(f"load_state: {e}")

def save_state():
    try:
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump(STATE, f, ensure_ascii=False)
    except Exception as e:
        log.error(f"save_state: {e}")

def reset_today():
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å: —Ç–µ–∫—É—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã -> –∏—Å—Ç–æ—Ä–∏—é, –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫."""
    today_str = now_local().strftime("%Y-%m-%d")
    if STATE.get("signals"):
        STATE["history"].extend(STATE["signals"])
    STATE["signals"] = []
    save_state()

# ================= –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤ =================
def summarize(items):
    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è "–ø—Ä–∏–±—ã–ª—å": —Å—á–∏—Ç–∞–µ–º +1 –µ—Å–ª–∏ FT total >= 3, –∏–Ω–∞—á–µ -1 (–º–æ–¥–µ–ª—å –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
    win = lose = draw = 0
    for it in items:
        res = it.get("result")
        if res == "WIN":
            win += 1
        elif res == "LOSE":
            lose += 1
        else:
            draw += 1
    played = win + lose + draw
    streak = f"–°—Ç–∞–≤–æ–∫: {played}, –í–∏–Ω: {win}, –õ—É–∑: {lose}, –ù/–î: {draw}\n"
    return streak

def finalize_results_for_day(day_items):
    """–û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–≥–Ω–∞–ª–æ–≤ (WIN/LOSE) –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—á—ë—Ç–∞."""
    url = "https://v3.football.api-sports.io/fixtures"
    changed = 0
    for it in day_items:
        if it.get("result") in ("WIN", "LOSE"):
            continue
        fid = it.get("fixture_id")
        data = api_get(url, {"id": fid}) or {}
        resp = (data.get("response") or [])
        if not resp:
            continue
        st = resp[0]["fixture"]["status"]["short"]
        gh, ga, tot = goals_total_from_fixture(resp[0])
        if st in ("FT", "AET", "PEN"):
            it["final_total"] = tot
            it["result"] = "WIN" if is_tb25_total(tot) else "LOSE"
            changed += 1
    if changed:
        save_state()

def day_report():
    # –ø–µ—Ä–µ–¥ –æ—Ç—á—ë—Ç–æ–º ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    finalize_results_for_day(STATE.get("signals", []))
    txt = ["üìä *–û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å*"]
    today_str = now_local().strftime("%Y-%m-%d")
    today_signals = [s for s in STATE.get("signals", []) if s.get("date") == today_str]
    if not today_signals:
        txt.append("–ó–∞ —Å–µ–≥–æ–¥–Ω—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –±—ã–ª–æ.")
    else:
        txt.append(summarize(today_signals))
        for i, s in enumerate(today_signals, 1):
            line = (
                f"{i}. {s['home']}‚Äì{s['away']} | "
                f"—É—Å–ª–æ–≤–∏–µ: H2H –¢–ë2.5 + 2/2 –¢–ë2.5 —É –æ–±–µ–∏—Ö | "
                f"–∫—ç—Ñ –¢–ë2.5: {s.get('odds_over25','‚Äì')}"
            )
            res = s.get("result")
            if res:
                line += f" | –∏—Ç–æ–≥: {s.get('final_total','?')} ({'‚úÖ' if res=='WIN' else '‚ùå'})"
            txt.append(line)
    send("\n".join(txt))

def weekly_report():
    tz = pytz.timezone(TIMEZONE)
    now = datetime.now(tz)
    start = (now - timedelta(days=6)).date()
    items = [x for x in STATE.get("history", []) if date.fromisoformat(x["date"]) >= start]
    txt = ["üìÖ *–ù–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞* (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)"]
    if not items:
        txt.append("–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        txt.append(summarize(items))
    send("\n".join(txt))

def monthly_report():
    tz = pytz.timezone(TIMEZONE)
    now = datetime.now(tz)
    first_day = now.replace(day=1).date()
    items = [x for x in STATE.get("history", []) if date.fromisoformat(x["date"]) >= first_day]
    txt = ["üóì *–ú–µ—Å—è—á–Ω–∞—è —Å–≤–æ–¥–∫–∞* (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü)"]
    if not items:
        txt.append("–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        txt.append(summarize(items))
    send("\n".join(txt))

# ================= –°–∫–∞–Ω –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ =================
def scan_and_signal_today():
    """
    1) –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (status NS/Not Started)
    2) –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:
       - –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—á–Ω—ã–π ‚Äî –¢–ë2.5
       - —É –∫–∞–∂–¥–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥ 2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–∞ ‚Äî –¢–ë2.5
       - (–æ–ø—Ü.) –∫—ç—Ñ –Ω–∞ –¢–ë2.5 –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    3) –®–ª—ë–º —Å–∏–≥–Ω–∞–ª—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ STATE
    """
    tz = pytz.timezone(TIMEZONE)
    today = datetime.now(tz).strftime("%Y-%m-%d")

    # —Å–±—Ä–æ—Å–∏—Ç—å "—Å–µ–≥–æ–¥–Ω—è" –µ—Å–ª–∏ –¥–∞—Ç–∞ –ø–æ–º–µ–Ω—è–ª–∞—Å—å
    last_date_in_state = STATE.get("signals", [{}])[-1].get("date") if STATE.get("signals") else None
    if last_date_in_state and last_date_in_state != today:
        reset_today()

    url = "https://v3.football.api-sports.io/fixtures"
    data = api_get(url, {"date": today})
    if not data:
        return
    fixtures = data.get("response", []) or []

    matches = []
    for m in fixtures:
        try:
            if m["fixture"]["status"]["short"] != "NS":
                continue
            home_id = m["teams"]["home"]["id"]
            away_id = m["teams"]["away"]["id"]
            home   = m["teams"]["home"]["name"]
            away   = m["teams"]["away"]["name"]
            fid    = m["fixture"]["id"]

            # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            if not last_h2h_is_tb25(home_id, away_id):
                continue
            if not last_k_is_tb25_for_team(home_id, k=2):
                continue
            if not last_k_is_tb25_for_team(away_id, k=2):
                continue

            # (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫—ç—Ñ—É –¢–ë2.5
            odds = odds_over25_for_fixture(fid)
            if (ODDS_MIN is not None and (odds is None or odds < ODDS_MIN)):
                continue
            if (ODDS_MAX is not None and (odds is None or odds > ODDS_MAX)):
                continue

            matches.append((m, odds))
        except Exception as e:
            log.error(f"scan item err: {e}")

    if not matches:
        send("‚ÑπÔ∏è –°–∫–∞–Ω 08:00: –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –°–∏–≥–Ω–∞–ª—ã
    lines = ["üî• *–°–∏–≥–Ω–∞–ª—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–ø—Ä–µ–¥–º–∞—Ç—á)*", "_–°—Ç—Ä–∞—Ç–µ–≥–∏—è: H2H –¢–ë2.5 + 2/2 –¢–ë2.5 —É –æ–±–µ–∏—Ö_"]
    for m, odds in matches:
        home = m["teams"]["home"]["name"]
        away = m["teams"]["away"]["name"]
        fid  = m["fixture"]["id"]
        league = f"{m['league']['country']} ‚Äî {m['league']['name']}"
        time_ = m["fixture"]["date"]  # ISO
        o_str = f"{odds:.2f}" if isinstance(odds, float) else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª (–¥–ª—è –æ—Ç—á—ë—Ç–∞ –∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–µ—á–µ—Ä–æ–º)
        STATE["signals"].append({
            "date": today,
            "fixture_id": fid,
            "home": home,
            "away": away,
            "league": league,
            "odds_over25": odds,
            "result": None,
        })

        lines.append(
            f"‚Ä¢ {league}\n  {home} ‚Äî {away}\n  –ö—ç—Ñ –¢–ë2.5: *{o_str}*"
        )

    save_state()
    send("\n".join(lines))

# ================= –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª =================
def main_loop():
    load_state()
    send("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (–ø—Ä–µ–¥–º–∞—Ç—á, Render-ready).")
    send("‚ÑπÔ∏è –ì—Ä–∞—Ñ–∏–∫: —Å–∫–∞–Ω –≤ 08:00; –æ—Ç—á—ë—Ç 23:30; –Ω–µ–¥–µ–ª—è ‚Äî –≤—Å 23:50; –º–µ—Å—è—Ü ‚Äî –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å 23:50.")

    last_scan_date = None
    tz = pytz.timezone(TIMEZONE)

    while True:
        try:
            now = datetime.now(tz)

            # –°–∫–∞–Ω –≤ 08:00 (—Ä–∞–∑ –≤ –¥–µ–Ω—å)
            if now.hour == 8 and now.minute == 0:
                if last_scan_date != now.date():
                    scan_and_signal_today()
                    last_scan_date = now.date()
                    time.sleep(60)  # —á—Ç–æ–±—ã –Ω–µ –¥–µ—Ä–≥–∞–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑

            # –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç 23:30
            if now.hour == 23 and now.minute == 30:
                day_report()
                time.sleep(60)

            # –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º 23:50
            if now.hour == 23 and now.minute == 50 and now.weekday() == 6:
                weekly_report()
                time.sleep(60)

            # –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ 23:50
            tomorrow = now + timedelta(days=1)
            if now.hour == 23 and now.minute == 50 and tomorrow.month != now.month:
                monthly_report()
                time.sleep(60)

            time.sleep(LOOP_SECONDS)
        except Exception as e:
            log.error(f"main loop error: {e}")
            time.sleep(LOOP_SECONDS)

# ================= RUN =================
if __name__ == "__main__":
    # 1) HTTP –¥–ª—è Render
    Thread(target=run_http, daemon=True).start()
    # 2) –õ–æ–≥–∏–∫–∞
    main_loop()
