# -*- coding: utf-8 -*-
"""
–ù–µ–ø–∞–¥–∞—é—â–∏–π –∫–∞—Ä–∫–∞—Å –±–æ—Ç–∞ –¥–ª—è Render:
- HTTP health –Ω–∞ / (—á—Ç–æ–±—ã Render –Ω–µ –≤—ã–∫–ª—é—á–∞–ª web-—Å–µ—Ä–≤–∏—Å)
- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–µ –ø–∞–¥–∞–µ—Ç –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏)
- –ö–æ–º–∞–Ω–¥—ã /start /ping /status /scan
- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ (08:00 scan, 23:30 daily, –≤—Å 23:50 weekly, –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å 23:50 monthly)
- –í–µ—Å—å –∫–æ–¥ –æ–∫—Ä—É–∂—ë–Ω try/except —Å –ª–æ–≥–∞–º–∏
"""
import os
import sys
import time
import json
import pytz
import traceback
import threading
from datetime import datetime, timedelta, date

from flask import Flask

# –¢–µ–ª–µ–≥—Ä–∞–º ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (–µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–µ —à–ª—ë–º)
try:
    import telebot
except Exception:
    telebot = None


# ====================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ======================

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
TELEGRAM_CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID", "").strip()
TZ_NAME            = os.getenv("TZ", "Europe/Warsaw").strip()

# –ß–∞—Å—Ç–æ—Ç–∞ ¬´—Ç–∏–∫–∞¬ª –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
TICK_SECONDS = 30  # –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

# –í—Ä–µ–º–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è TZ_NAME)
SCAN_TIME     = (8, 0)    # 08:00
DAILY_TIME    = (23, 30)  # 23:30
WEEKLY_TIME   = (23, 50)  # 23:50 –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
MONTHLY_TIME  = (23, 50)  # 23:50 –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞

# –ü–∞–ø–∫–∞ –¥–ª—è –ª—ë–≥–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π/—Ñ–∞–π–ª–æ–≤ (–¥–Ω–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –ø—Ä.)
STATE_FILE = "runtime_state.json"


# ====================== –£—Ç–∏–ª–∏—Ç—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ======================

def log(msg: str):
    ts = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")
    print(f"[{ts}] {msg}", flush=True)


# ====================== –ß–∞—Å—ã/—Ç–∞–π–º–∑–æ–Ω–∞ ======================

def now_local():
    tz = pytz.timezone(TZ_NAME)
    return datetime.now(tz)

def is_last_day_of_month(dt: datetime) -> bool:
    tomorrow = dt + timedelta(days=1)
    return tomorrow.month != dt.month


# ====================== HTTP health –¥–ª—è Render ======================

app = Flask(__name__)

@app.get("/")
def health():
    return "ok"

def run_http():
    port = int(os.getenv("PORT", "10000"))
    log(f"[boot] HTTP health server on 0.0.0.0:{port}")
    app.run(host="0.0.0.0", port=port)


# ====================== –¢–µ–ª–µ–≥—Ä–∞–º –æ–±—ë—Ä—Ç–∫–∏ ======================

def can_telegram():
    return bool(TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID and telebot)

def send_telegram(text: str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞. –ï—Å–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ ‚Äî —Ç–æ–ª—å–∫–æ –ª–æ–≥."""
    if not can_telegram():
        log(f"[TG disabled] {text}")
        return
    try:
        bot.send_message(int(TELEGRAM_CHAT_ID), text)
    except Exception:
        log("[TG error] " + text)
        traceback.print_exc()


# ====================== –õ—ë–≥–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ======================

def load_state():
    try:
        if os.path.exists(STATE_FILE):
            with open(STATE_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
    except Exception:
        traceback.print_exc()
    return {
        "last_scan_date": "",     # "YYYY-MM-DD"
        "last_daily_date": "",
        "last_weekly_date": "",
        "last_monthly_stamp": "",  # "YYYY-MM" (–º–µ—Å—è—Ü –æ—Ç—á—ë—Ç–∞)
    }

def save_state(st):
    try:
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump(st, f, ensure_ascii=False, indent=2)
    except Exception:
        traceback.print_exc()


STATE = load_state()


# ====================== –ó–∞–≥–ª—É—à–∫–∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ ======================

def do_scan():
    """–¢—É—Ç –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç—á–µ–π.
       –ü–æ–∫–∞ —à–ª—ë–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ."""
    dt = now_local().strftime("%Y-%m-%d %H:%M %Z")
    send_telegram(f"üîé –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–∑–∞–≥–ª—É—à–∫–∞): {dt}\n"
                  f"–ü–æ–∑–∂–µ —Å—é–¥–∞ –≤—Å—Ç–∞–≤–∏–º —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É.")

def send_daily_report():
    dt = now_local().strftime("%Y-%m-%d %H:%M %Z")
    send_telegram(f"üìä –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç (–∑–∞–≥–ª—É—à–∫–∞): {dt}\n"
                  f"–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å.")

def send_weekly_report():
    dt = now_local().strftime("%Y-%m-%d %H:%M %Z")
    send_telegram(f"üóì –ù–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞): {dt}\n"
                  f"–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é.")

def send_monthly_report():
    dt = now_local().strftime("%Y-%m-%d %H:%M %Z")
    send_telegram(f"üìÖ –ú–µ—Å—è—á–Ω–∞—è —Å–≤–æ–¥–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞): {dt}\n"
                  f"–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü.")


# ====================== –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ======================

def should_fire(hour_min_tuple) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–µ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ø–∞–ª–æ –≤ –Ω—É–∂–Ω—É—é –º–∏–Ω—É—Ç—É."""
    hh, mm = hour_min_tuple
    now = now_local()
    return (now.hour == hh) and (now.minute == mm)

def cron_tick():
    """–û–¥–∏–Ω ¬´—Ç–∏–∫¬ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ‚Äî —Ä–µ—à–∞–µ—Ç, —á—Ç–æ –∑–∞–ø—É—Å–∫–∞—Ç—å."""
    global STATE

    now = now_local()
    today = now.strftime("%Y-%m-%d")

    # 1) –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–∫–∞–Ω –≤ 08:00
    if should_fire(SCAN_TIME):
        if STATE.get("last_scan_date") != today:
            log("Run: do_scan()")
            try:
                do_scan()
                STATE["last_scan_date"] = today
                save_state(STATE)
            except Exception:
                traceback.print_exc()

    # 2) –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –≤ 23:30
    if should_fire(DAILY_TIME):
        if STATE.get("last_daily_date") != today:
            log("Run: send_daily_report()")
            try:
                send_daily_report()
                STATE["last_daily_date"] = today
                save_state(STATE)
            except Exception:
                traceback.print_exc()

    # 3) –ù–µ–¥–µ–ª—å–Ω—ã–π (–≤—Å) 23:50
    if should_fire(WEEKLY_TIME) and now.weekday() == 6:  # Monday=0 ... Sunday=6
        if STATE.get("last_weekly_date") != today:
            log("Run: send_weekly_report()")
            try:
                send_weekly_report()
                STATE["last_weekly_date"] = today
                save_state(STATE)
            except Exception:
                traceback.print_exc()

    # 4) –ú–µ—Å—è—á–Ω—ã–π –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ 23:50
    if should_fire(MONTHLY_TIME) and is_last_day_of_month(now):
        ym = now.strftime("%Y-%m")  # –º–µ—Å—è—Ü –æ—Ç—á—ë—Ç–∞
        if STATE.get("last_monthly_stamp") != ym:
            log("Run: send_monthly_report()")
            try:
                send_monthly_report()
                STATE["last_monthly_stamp"] = ym
                save_state(STATE)
            except Exception:
                traceback.print_exc()


# ====================== –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç (–∫–æ–º–∞–Ω–¥—ã) ======================

bot = None
if can_telegram():
    try:
        bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN, parse_mode="HTML")

        @bot.message_handler(commands=["start"])
        def cmd_start(m):
            msg = (
                "–ü—Ä–∏–≤–µ—Ç! –Ø –∂–∏–≤—É –Ω–∞ Render üëã\n\n"
                "–ö–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–∫–ª–∏–∫\n"
                "‚Ä¢ /status ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ TZ\n"
                "‚Ä¢ /scan ‚Äî –≤—Ä—É—á–Ω—É—é –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω\n"
            )
            bot.send_message(m.chat.id, msg)

        @bot.message_handler(commands=["ping"])
        def cmd_ping(m):
            bot.send_message(m.chat.id, "pong ‚úÖ")

        @bot.message_handler(commands=["status"])
        def cmd_status(m):
            info = (
                f"üïí TZ={TZ_NAME}\n"
                f"üîé –°–∫–∞–Ω: {SCAN_TIME[0]:02d}:{SCAN_TIME[1]:02d}\n"
                f"üìä –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç: {DAILY_TIME[0]:02d}:{DAILY_TIME[1]:02d}\n"
                f"üóì –ù–µ–¥–µ–ª—å–Ω—ã–π (–≤—Å): {WEEKLY_TIME[0]:02d}:{WEEKLY_TIME[1]:02d}\n"
                f"üìÖ –ú–µ—Å—è—á–Ω—ã–π (–ø–æ—Å–ª. –¥–µ–Ω—å): {MONTHLY_TIME[0]:02d}:{MONTHLY_TIME[1]:02d}\n"
            )
            bot.send_message(m.chat.id, info)

        @bot.message_handler(commands=["scan"])
        def cmd_scan(m):
            try:
                do_scan()
                bot.send_message(m.chat.id, "–ó–∞–ø—É—Å—Ç–∏–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚úÖ")
            except Exception:
                traceback.print_exc()
                bot.send_message(m.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ ‚ùå")

        def run_tg():
            log("[boot] Telegram polling started")
            while True:
                try:
                    bot.infinity_polling(timeout=30, long_polling_timeout=30)
                except Exception:
                    traceback.print_exc()
                    time.sleep(5)

        threading.Thread(target=run_tg, daemon=True).start()

    except Exception:
        log("WARN: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.")
        traceback.print_exc()
else:
    log("INFO: Telegram –æ—Ç–∫–ª—é—á—ë–Ω (–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞/—á–∞—Ç_id –∏–ª–∏ pyTelegramBotAPI).")


# ====================== –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª ======================

def main_loop():
    log("Main loop started.")
    while True:
        try:
            cron_tick()           # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            log("Tick: alive.")   # –≤–∏–¥–Ω–æ –≤ –ª–æ–≥–∞—Ö Render, —á—Ç–æ –∂–∏–≤—ë–º
            time.sleep(TICK_SECONDS)
        except Exception:
            log("ERROR in main loop:")
            traceback.print_exc()
            time.sleep(5)         # —á—Ç–æ–±—ã –Ω–µ –∫—Ä—É—Ç–∏—Ç—å –æ—à–∏–±–∫–∏ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ


# ====================== –°—Ç–∞—Ä—Ç ======================

if __name__ == "__main__":
    # 1) HTTP health –¥–ª—è Render
    threading.Thread(target=run_http, daemon=True).start()

    # 2) –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        send_telegram(
            "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è, Render-ready).\n"
            f"‚ÑπÔ∏è TZ={TZ_NAME}. "
            f"–°–∫–∞–Ω 08:00, –¥–Ω–µ–≤–Ω–æ–π 23:30, –Ω–µ–¥–µ–ª—å–Ω—ã–π –≤—Å 23:50, –º–µ—Å—è—á–Ω—ã–π –ø–æ—Å–ª. –¥–µ–Ω—å 23:50.\n"
            "–î–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: /scan"
        )
    except Exception:
        traceback.print_exc()

    # 3) –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    main_loop()
