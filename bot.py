# -*- coding: utf-8 -*-
"""
–°–∏–≥–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç:
- –£—Å–ª–æ–≤–∏–µ: —É–∂–µ –∑–∞–±–∏—Ç–æ 2 –∏–ª–∏ 3 –≥–æ–ª–∞.
  * –ø—Ä–∏ 2 –≥–æ–ª–∞—Ö –ø—Ä–æ–≤–µ—Ä—è–µ–º –¢–ë(3)
  * –ø—Ä–∏ 3 –≥–æ–ª–∞—Ö –ø—Ä–æ–≤–µ—Ä—è–µ–º –¢–ë(4)
- –ö—ç—Ñ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç LOW_ODDS –¥–æ HIGH_ODDS (–≤–∫–ª—é—á.)
- –≠–∫–æ–Ω–æ–º-—Ä–µ–∂–∏–º: –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å /fixtures?live=all —Ä–∞–∑ –≤ POLL_SECONDS, odds —Ç–æ–ª—å–∫–æ –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º.
- –í 23:30 –ø–æ –ú–∏–Ω—Å–∫—É ‚Äî –æ—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å (–ø—Ä–∏–±—ã–ª—å –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–≥–Ω–∞–ª—É: win=odds-1, lose=-1).
"""

import os, sys, time, json, logging
from datetime import datetime
from threading import Thread

import pytz
import requests
import telebot

# ---------- Render keep-alive (–º–∏–Ω–∏ HTTP-—Å–µ—Ä–≤–µ—Ä) ----------
from flask import Flask
app = Flask(__name__)

@app.get("/")
def healthcheck():
    return "ok"

def run_http():
    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)
# ----------------------------------------------------------


# ======== –°–µ–∫—Ä–µ—Ç—ã –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ ========
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID")
API_KEY   = os.getenv("API_FOOTBALL_KEY")
TIMEZONE  = "Europe/Minsk"

if not API_TOKEN or not CHAT_ID or not API_KEY:
    sys.exit("‚ùå –ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_BOT_TOKEN / TELEGRAM_CHAT_ID / API_FOOTBALL_KEY")
CHAT_ID = int(CHAT_ID)

# ======== –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ========
# –ö–∞–∫ —á–∞—Å—Ç–æ —Ç—è–Ω—É—Ç—å –ª–∞–π–≤—ã (–º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥ –ª–∏–º–∏—Ç–∞ API)
POLL_SECONDS = int(os.getenv("POLL_SECONDS", "900"))   # 900 = 15 –º–∏–Ω—É—Ç

# –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ–∫–æ–ª–æ 20-–π). –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω ‚Äî USE_20_WINDOW=False
USE_20_WINDOW = os.getenv("USE_20_WINDOW", "true").lower() in ("1", "true", "yes")
WINDOW_20 = range(19, 23)   # 19‚Äì22'

# –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É
LOW_ODDS  = float(os.getenv("LOW_ODDS",  "1.29"))
HIGH_ODDS = float(os.getenv("HIGH_ODDS", "2.00"))

# ======== –õ–æ–≥–∏ –∏ —Ñ–∞–π–ª—ã ========
LOG_FILE     = "bot.log"
SIGNALS_FILE = "signals.json"   # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ fixture_id

logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s %(levelname)s: %(message)s"
)
log = logging.getLogger("signals-bot")

bot = telebot.TeleBot(API_TOKEN, parse_mode="Markdown")

API = requests.Session()
API.headers.update({"x-apisports-key": API_KEY})
DEFAULT_TIMEOUT = 15

# ======== –ü–∞–º—è—Ç—å –∑–∞ –¥–µ–Ω—å ========
# –°–∏–≥–Ω–∞–ª—ã —Å–æ –≤—Å–µ–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Ñ–∏—Ç
signals = []          # [{fixture_id, home, away, league, country, minute, goals_home, goals_away, target_total, odds, bookmaker}]
signaled_ids = set()  # —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å —Å–∏–≥–Ω–∞–ª –ø–æ –æ–¥–Ω–æ–º—É –º–∞—Ç—á—É –¥–≤–∞–∂–¥—ã


# ======== –£—Ç–∏–ª–∏—Ç—ã ========
def now_local() -> datetime:
    return datetime.now(pytz.timezone(TIMEZONE))

def send(text: str):
    try:
        bot.send_message(CHAT_ID, text)
    except Exception as e:
        log.error(f"Telegram send error: {e}")

def save_state():
    try:
        with open(SIGNALS_FILE, "w", encoding="utf-8") as f:
            json.dump(
                {"signals": signals, "signaled_ids": list(signaled_ids)},
                f,
                ensure_ascii=False
            )
    except Exception as e:
        log.error(f"save_state error: {e}")

def load_state():
    global signals, signaled_ids
    if not os.path.exists(SIGNALS_FILE):
        return
    try:
        with open(SIGNALS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        signals = data.get("signals", [])
        signaled_ids = set(data.get("signaled_ids", []))
    except Exception as e:
        log.error(f"load_state error: {e}")

def get_live():
    """1 –∑–∞–ø—Ä–æ—Å ‚Äî –≤—Å–µ –º–∞—Ç—á–∏ –≤ –ª–∞–π–≤–µ"""
    try:
        r = API.get("https://v3.football.api-sports.io/fixtures?live=all", timeout=DEFAULT_TIMEOUT)
        if r.status_code != 200:
            log.warning("fixtures HTTP %s %s", r.status_code, r.text[:200])
        r.raise_for_status()
        return r.json().get("response", []) or []
    except Exception as e:
        log.error(f"get_live error: {e}")
        return []

def get_fixture_result(fid: int):
    """1 –∑–∞–ø—Ä–æ—Å ‚Äî –∏—Ç–æ–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞ (–¥–ª—è –æ—Ç—á—ë—Ç–∞)"""
    try:
        r = API.get(f"https://v3.football.api-sports.io/fixtures?id={fid}", timeout=DEFAULT_TIMEOUT)
        r.raise_for_status()
        resp = r.json().get("response", []) or []
        if not resp:
            return None
        m = resp[0]
        st = m["fixture"]["status"]["short"]   # e.g. "FT"
        gh = m["goals"]["home"] or 0
        ga = m["goals"]["away"] or 0
        return st, gh, ga
    except Exception as e:
        log.error(f"get_fixture_result({fid}) error: {e}")
        return None

def get_over_odds_for_line(fixture_id: int, target_total: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—ç—Ñ –ø–æ —Ä—ã–Ω–∫—É Over/Under –¥–ª—è "Over {target_total}"
    –∏ –∏–º—è –±—É–∫–º–µ–∫–µ—Ä–∞. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî (None, None).
    """
    try:
        r = API.get(f"https://v3.football.api-sports.io/odds?fixture={fixture_id}",
                    timeout=DEFAULT_TIMEOUT)
        r.raise_for_status()
        resp = r.json().get("response", []) or []

        best_odd = None
        best_book = None

        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: response -> [{bookmakers: [{name, bets: [{name:"Over/Under", values:[{value:"Over 3", odd:"1.45"}, ...]}]}]}]
        for item in resp:
            for bm in item.get("bookmakers", []):
                bm_name = bm.get("name")
                for bet in bm.get("bets", []):
                    if bet.get("name") != "Over/Under":
                        continue
                    for val in bet.get("values", []):
                        if val.get("value") == f"Over {target_total}":
                            try:
                                odd = float(val.get("odd"))
                            except (TypeError, ValueError):
                                continue
                            if best_odd is None or odd > best_odd:
                                best_odd = odd
                                best_book = bm_name

        return best_odd, best_book
    except Exception as e:
        log.error(f"get_over_odds_for_line({fixture_id},{target_total}) error: {e}")
        return None, None


# ======== –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ========
def scan_and_signal():
    live = get_live()
    for m in live:
        try:
            f = m["fixture"]; t = m["teams"]; g = m["goals"]; L = m["league"]
            fid = f["id"]
            elapsed = f["status"]["elapsed"] or 0

            if fid in signaled_ids:
                continue

            # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Ñ–∏–ª—å—Ç—Ä –Ω–∞ ¬´–æ–∫–æ–ª–æ 20-–π¬ª
            if USE_20_WINDOW and elapsed not in WINDOW_20:
                continue

            gh, ga = g["home"] or 0, g["away"] or 0
            total_goals = gh + ga

            # –ò–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ 2 –∏–ª–∏ 3 –≥–æ–ª–∞
            if total_goals not in (2, 3):
                continue

            # –í—ã–±–∏—Ä–∞–µ–º –ª–∏–Ω–∏—é: –ø—Ä–∏ 2 –≥–æ–ª–∞—Ö –¢–ë(3), –ø—Ä–∏ 3 –≥–æ–ª–∞—Ö –¢–ë(4)
            target_total = 3 if total_goals == 2 else 4

            # –ó–∞–ø—Ä–æ—Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–∏–Ω–∏—é
            odds, bookmaker = get_over_odds_for_line(fid, target_total)
            if odds is None:
                continue

            # –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ –∫—ç—Ñ—É
            if not (LOW_ODDS <= odds <= HIGH_ODDS):
                continue

            # –£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã ‚Äî —Å–∏–≥–Ω–∞–ª
            rec = {
                "fixture_id": fid,
                "home": t["home"]["name"],
                "away": t["away"]["name"],
                "league": L["name"],
                "country": L["country"],
                "minute": int(elapsed),
                "goals_home": gh,
                "goals_away": ga,
                "target_total": target_total,
                "odds": float(odds),
                "bookmaker": bookmaker,
            }
            signals.append(rec)
            signaled_ids.add(fid)
            save_state()

            line = f"–¢–ë({target_total})"
            send(
                "‚ö™ *–°—Ç–∞–≤–∫–∞!*\n"
                f"üèÜ {rec['country']} ‚Äî {rec['league']}\n"
                f"{rec['home']} {gh} ‚Äî {ga} {rec['away']}\n"
                f"‚è± {elapsed}'   |   {line} @ *{rec['odds']:.2f}*"
                + (f"  ({bookmaker})" if bookmaker else "") +
                "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            )
            log.info("Signal sent: %s - %s, %s @ %.2f (fid=%s)",
                     rec['home'], rec['away'], line, rec['odds'], fid)

        except Exception as e:
            log.error(f"scan_and_signal item error: {e}")


def send_daily_report():
    """
    –í 23:30: –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º, –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏—Ç–æ–≥ –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞ –∏ –ø–æ—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–±—ã–ª—å.
    –ï—Å–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π total > target_total -> win (–ø—Ä–∏–±—ã–ª—å = odds-1), –∏–Ω–∞—á–µ loss (-1).
    """
    total_profit = 0.0
    played = lost = pending = 0
    lines = ["üìä *–û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å*"]

    for rec in signals:
        res = get_fixture_result(rec["fixture_id"])
        if not res:
            pending += 1
            lines.append(f"{rec['home']} ‚Äî {rec['away']} | —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            continue

        st, gh, ga = res
        match_total = (gh or 0) + (ga or 0)
        target_total = rec.get("target_total", 3)
        odds = float(rec.get("odds", 1.0))

        if st == "FT":
            if match_total > target_total:
                pnl = odds - 1.0
                played += 1
                lines.append(
                    f"{rec['home']} {gh}-{ga} {rec['away']} | ‚úÖ –°—ã–≥—Ä–∞–ª–æ | {pnl:+.2f}  (–¢–ë({target_total}) @ {odds:.2f})"
                )
            else:
                pnl = -1.0
                lost += 1
                lines.append(
                    f"{rec['home']} {gh}-{ga} {rec['away']} | ‚ùå –ù–µ —Å—ã–≥—Ä–∞–ª–æ | {pnl:+.2f}  (–¢–ë({target_total}) @ {odds:.2f})"
                )
            total_profit += pnl
        else:
            pending += 1
            lines.append(f"{rec['home']} ‚Äî {rec['away']} | —Å—Ç–∞—Ç—É—Å: {st}")

    lines.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
    lines.append(f"–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
    lines.append(f"–°—ã–≥—Ä–∞–ª–æ: {played}  |  –ù–µ —Å—ã–≥—Ä–∞–ª–æ: {lost}  |  –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending}")
    lines.append(f"–ò—Ç–æ–≥ –∑–∞ –¥–µ–Ω—å: {total_profit:+.2f}")

    send("\n".join(lines))


# ================== RUN ==================
if __name__ == "__main__":
    # Render: –ø–æ–¥–Ω–∏–º–∞–µ–º HTTP, —á—Ç–æ–±—ã –∏–Ω—Å—Ç–∞–Ω—Å —Å—á–∏—Ç–∞–ª—Å—è ¬´–∂–∏–≤—ã–º¬ª –Ω–∞ Free-–ø–ª–∞–Ω–µ
    Thread(target=run_http, daemon=True).start()

    load_state()
    send(
        "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚Äî –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è!\n"
        f"–§–∏–ª—å—Ç—Ä: {'~20 –º–∏–Ω' if USE_20_WINDOW else '–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –º–∏–Ω—É—Ç–µ'} | "
        f"–∫—ç—Ñ {LOW_ODDS:.2f}‚Äì{HIGH_ODDS:.2f} | –æ–ø—Ä–æ—Å –∫–∞–∂–¥—ã–µ {POLL_SECONDS//60} –º–∏–Ω."
    )

    while True:
        try:
            scan_and_signal()

            # –†–∞–∑–æ–≤—ã–π –æ—Ç—á—ë—Ç –≤ 23:30 –ø–æ –ú–∏–Ω—Å–∫—É
            now = now_local()
            if now.hour == 23 and now.minute == 30:
                send_daily_report()
                # –æ—á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å
                signals.clear()
                signaled_ids.clear()
                save_state()
                time.sleep(60)  # —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –¥–≤–∞–∂–¥—ã –≤ —Ç—É –∂–µ –º–∏–Ω—É—Ç—É

            time.sleep(POLL_SECONDS)
        except Exception as e:
            log.error(f"Main loop error: {e}")
            time.sleep(POLL_SECONDS)
