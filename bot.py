# -*- coding: utf-8 -*-
"""
–ü—Ä–µ–¥–º–∞—Ç—á–µ–≤—ã–π —Å–∫–∞–Ω–µ—Ä –Ω–∞ API-Football.
–£—Å–ª–æ–≤–∏—è —Å–∏–≥–Ω–∞–ª–∞:
  - H2H: –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 –æ—á–Ω—ã—Ö –º–∞—Ç—á–µ–π >= 2 –±—ã–ª–∏ –¢–ë2.5
  - –ï—Å—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∞ –¢–ë2.5 –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [ODDS_MIN; ODDS_MAX]
–§–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥ –≤—ã–∫–ª—é—á–µ–Ω–∞ (CHECK_FORM=False), –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å.

–ì—Ä–∞—Ñ–∏–∫:
  - —Å–∫–∞–Ω: 08:00 –ø–æ TZ
  - –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç: 23:30
  - –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç: –≤—Å 23:50
  - –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç: –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ 23:50
"""

import os, sys, json, time, logging
from datetime import datetime, timedelta, date
import calendar
import pytz
import requests
import telebot

# --- keep-alive –¥–ª—è Render (web service) ---
from threading import Thread
from flask import Flask
app = Flask(__name__)

@app.get("/")
def health():
    return "ok"

def run_http():
    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)
# -------------------------------------------

# ====== –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ======
API_TOKEN  = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID    = os.getenv("TELEGRAM_CHAT_ID")
API_KEY    = os.getenv("API_FOOTBALL_KEY")
TIMEZONE   = os.getenv("TZ", "Europe/Warsaw")
if not API_TOKEN or not CHAT_ID or not API_KEY:
    sys.exit("‚ùå –ù—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å TELEGRAM_BOT_TOKEN / TELEGRAM_CHAT_ID / API_FOOTBALL_KEY")

CHAT_ID = int(CHAT_ID)

# –î–∏–∞–ø–∞–∑–æ–Ω –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –Ω–∞ –¢–ë2.5
ODDS_MIN = 1.29
ODDS_MAX = 2.00

# H2H –ø—Ä–∞–≤–∏–ª–æ
H2H_LAST = 3
H2H_REQUIRE_TB = 2  # –∏–∑ 3 –º–∏–Ω–∏–º—É–º 2 –º–∞—Ç—á–∞ —Å —Ç–æ—Ç–∞–ª–æ–º >=3

# –ü—Ä–æ–≤–µ—Ä–∫–∞ "—Ñ–æ—Ä–º—ã" –∫–æ–º–∞–Ω–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–∞)
CHECK_FORM = False
FORM_LAST = 5
FORM_REQUIRE_TB = 2

# –°—Ç–∞–≤–∫–∞-–µ–¥–∏–Ω–∏—Ü–∞ –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
STAKE = 1.0

# –§–∞–π–ª—ã
LOG_FILE    = "bot.log"
STATE_FILE  = "signals.json"  # –∑–¥–µ—Å—å —Ö—Ä–∞–Ω–∏–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –∏ —Ä–∞—Å—á—ë—Ç –ø–æ –¥–∞—Ç–∞–º

# –í—Ä–µ–º—è –∑–∞–¥–∞—á (—á–∞—Å—ã/–º–∏–Ω—É—Ç—ã –≤ TZ)
SCAN_HR, SCAN_MIN = (8, 0)           # 08:00 —Å–∫–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
DAILY_HR, DAILY_MIN = (23, 30)       # 23:30 –æ—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å
WEEKLY_HR, WEEKLY_MIN = (23, 50)     # 23:50 –æ—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é (–≤—Å)
MONTHLY_HR, MONTHLY_MIN = (23, 50)   # 23:50 –æ—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü (–ø–æ—Å–ª. –¥–µ–Ω—å)

# ====== –õ–æ–≥–≥–µ—Ä ======
logging.basicConfig(filename=LOG_FILE, level=logging.INFO,
                    format="%(asctime)s %(levelname)s: %(message)s")
log = logging.getLogger("prematch-bot")

# ====== Telegram ======
bot = telebot.TeleBot(API_TOKEN, parse_mode="Markdown")

def send(text: str):
    try:
        bot.send_message(CHAT_ID, text)
    except Exception as e:
        log.error(f"Telegram send error: {e}")

# –ö–æ–º–∞–Ω–¥–∞ —Ä—É—á–Ω–æ–≥–æ —Å–∫–∞–Ω–∞
@bot.message_handler(commands=['scan_now'])
def cmd_scan_now(m):
    try:
        dt = now_local().date()
        cnt = scan_day(dt)
        send(f"üîé –†—É—á–Ω–æ–π —Å–∫–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: *{cnt}*.")
    except Exception as e:
        send(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∞: {e}")
        log.exception("scan_now failed")

def telebot_polling():
    while True:
        try:
            bot.infinity_polling(timeout=60, long_polling_timeout=60)
        except Exception as e:
            log.error(f"telebot polling error: {e}")
            time.sleep(5)

# ====== API-Football ======
API_BASE = "https://v3.football.api-sports.io"
SESS = requests.Session()
SESS.headers.update({"x-apisports-key": API_KEY})

def api_get(path, params=None, timeout=20):
    url = f"{API_BASE}/{path}"
    r = SESS.get(url, params=params or {}, timeout=timeout)
    r.raise_for_status()
    data = r.json()
    return data.get("response", []) or []

# ====== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ======
def now_local():
    return datetime.now(pytz.timezone(TIMEZONE))

def load_state():
    if not os.path.exists(STATE_FILE):
        return {"picks": {}}   # picks: { "YYYY-MM-DD": [ {...}, ... ] }
    try:
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        log.error(f"load_state err: {e}")
        return {"picks": {}}

def save_state(state):
    try:
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump(state, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log.error(f"save_state err: {e}")

def append_pick(state, d: date, pick: dict):
    ds = d.isoformat()
    state.setdefault("picks", {}).setdefault(ds, []).append(pick)
    save_state(state)

def list_picks_between(state, d1: date, d2: date):
    """–í—Å–µ —Å–∏–≥–Ω–∞–ª—ã/–ø–∏–∫–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ."""
    res = []
    p = state.get("picks", {})
    cur = d1
    while cur <= d2:
        res.extend(p.get(cur.isoformat(), []))
        cur += timedelta(days=1)
    return res

def settle_pick(fx):
    """–í–µ—Ä–Ω—É—Ç—å (done, win, gh, ga). done==True –µ—Å–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç; win==True –µ—Å–ª–∏ –¢–ë2.5."""
    st = fx["fixture"]["status"]["short"]
    if st not in ("FT", "AET", "PEN"):
        return False, None, None, None
    gh = fx["goals"]["home"] or 0
    ga = fx["goals"]["away"] or 0
    win = (gh + ga) > 2.5
    return True, win, gh, ga

# ====== –õ–æ–≥–∏–∫–∞ –æ—Ç–±–æ—Ä–∞ ======
def goals_total_3plus(m) -> bool:
    gh = m["goals"]["home"] or 0
    ga = m["goals"]["away"] or 0
    return (gh + ga) >= 3

def pass_h2h(home_id, away_id):
    resp = api_get("fixtures/headtohead", {"h2h": f"{home_id}-{away_id}", "last": H2H_LAST})
    cnt = sum(1 for m in resp if goals_total_3plus(m))
    return cnt >= H2H_REQUIRE_TB, cnt

def count_tb25_in_last(team_id, last_n):
    resp = api_get("fixtures", {"team": team_id, "last": last_n})
    return sum(1 for m in resp if goals_total_3plus(m))

def pass_form(team_id):
    cnt = count_tb25_in_last(team_id, FORM_LAST)
    return cnt >= FORM_REQUIRE_TB, cnt

def find_over25_odds(fixture_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ (–ø–æ –±—É–∫–º–µ–∫–µ—Ä–∞–º) –Ω–∞ 'Over 2.5'."""
    odds_resp = api_get("odds", {"fixture": fixture_id})
    res = []
    for book in odds_resp:
        for market in (book.get("bookmakers") or []):
            # new format: book['bookmakers'] is a list; each has 'bets'
            # –≤ API-Football market 'Over/Under'
            for bet in market.get("bets", []):
                if bet.get("name", "").lower() in ("over/under", "over-under", "total", "totals"):
                    for v in bet.get("values", []):
                        # –∏—â–µ–º Over 2.5
                        val_name = (v.get("value") or "").strip().lower()
                        if val_name in ("over 2.5", "o 2.5", "2.5 over", "over2.5"):
                            odd = float(v.get("odd", 0))
                            if odd > 0:
                                res.append(odd)
    # –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –¥—Ä–µ–≤–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
    if not res:
        # odds_resp –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º bookmakers –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ:
        for b in odds_resp:
            for mkt in b.get("bets", []):
                if mkt.get("name", "").lower() in ("over/under", "over-under", "total", "totals"):
                    for v in mkt.get("values", []):
                        val_name = (v.get("value") or "").strip().lower()
                        if val_name in ("over 2.5", "o 2.5", "2.5 over", "over2.5"):
                            odd = float(v.get("odd", 0))
                            if odd > 0:
                                res.append(odd)
    return res

def pass_odds_range(odds_list):
    """–ï—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–æ—Ç–∏—Ä–æ–≤–∫–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [ODDS_MIN; ODDS_MAX]."""
    for x in odds_list:
        if ODDS_MIN <= x <= ODDS_MAX:
            return True, x
    return False, None

# ====== –°–∫–∞–Ω –¥–Ω—è ======
def scan_day(d: date) -> int:
    """–°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –º–∞—Ç—á–∏ –Ω–∞ –¥–∞—Ç—É d, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏ –ø–∏—à–µ–º –≤ –±–∞–∑—É."""
    state = load_state()
    total_signals = 0

    # –∑–∞–±–∏—Ä–∞–µ–º –≤—Å–µ –º–∞—Ç—á–∏ –∑–∞ –¥–µ–Ω—å
    fixtures = api_get("fixtures", {"date": d.isoformat(), "timezone": TIMEZONE})

    for m in fixtures:
        try:
            fid = m["fixture"]["id"]
            home = m["teams"]["home"]["name"]
            away = m["teams"]["away"]["name"]
            hid = m["teams"]["home"]["id"]
            aid = m["teams"]["away"]["id"]

            # H2H
            ok_h2h, cnt_h2h = pass_h2h(hid, aid)
            if not ok_h2h:
                log.info(f"[{home}-{away}] skip: h2h cntTB={cnt_h2h}/{H2H_LAST}")
                continue

            # –§–æ—Ä–º–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–∞)
            if CHECK_FORM:
                ok_home, form_home = pass_form(hid)
                ok_away, form_away = pass_form(aid)
                if not (ok_home and ok_away):
                    log.info(f"[{home}-{away}] skip: form H={form_home}/{FORM_LAST} A={form_away}/{FORM_LAST}")
                    continue

            # –ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –û–≤–µ—Ä 2.5
            odds = find_over25_odds(fid)
            ok_odds, chosen_odd = pass_odds_range(odds)
            if not ok_odds:
                log.info(f"[{home}-{away}] skip: no odds O2.5 in [{ODDS_MIN};{ODDS_MAX}] (found: {odds[:5]}...)")
                continue

            # —Å–∏–≥–Ω–∞–ª!
            total_signals += 1
            pick = {
                "fixture_id": fid,
                "home": home,
                "away": away,
                "league": m["league"]["name"],
                "country": m["league"]["country"],
                "date": d.isoformat(),
                "kickoff": m["fixture"]["date"],  # ISO
                "h2h_tb_cnt": cnt_h2h,
                "odd": chosen_odd,
                "market": "O2.5",
                "created_at": now_local().isoformat(),
            }
            append_pick(state, d, pick)

            msg = (
                "‚öΩ *–°–∏–≥–Ω–∞–ª (–ø—Ä–µ–¥–º–∞—Ç—á)*\n"
                f"üèÜ {pick['country']} ‚Äî {pick['league']}\n"
                f"{home} ‚Äî {away}\n"
                f"‚è∞ {pick['kickoff']}\n"
                f"üìà H2H –¢–ë2.5: {cnt_h2h}/{H2H_LAST}\n"
                f"üéØ –†—ã–Ω–æ–∫: –¢–ë 2.5 | –∫—ç—Ñ ~ *{chosen_odd:.2f}*\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            )
            send(msg)
            log.info(f"signal: {home}-{away} | odd {chosen_odd}")

            time.sleep(0.2)  # —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å API —Å–ª–∏—à–∫–æ–º —Ä–µ–∑–∫–æ
        except Exception as e:
            log.exception("scan_day item error")

    return total_signals

# ====== –û—Ç—á—ë—Ç—ã ======
def fetch_fixture(fid):
    resp = api_get("fixtures", {"id": fid})
    return resp[0] if resp else None

def settle_and_summary(picks):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (played, win, lose, open_, profit, lines[])"""
    played = win = lose = open_ = 0
    profit = 0.0
    lines = []
    for p in picks:
        fx = fetch_fixture(p["fixture_id"])
        if not fx:
            lines.append(f"{p['home']} ‚Äî {p['away']} | –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            continue
        done, iswin, gh, ga = settle_pick(fx)
        if not done:
            open_ += 1
            lines.append(f"{p['home']} {gh}-{ga} {p['away']} | ‚è≥ –µ—â—ë –∏–¥—ë—Ç")
            continue
        played += 1
        if iswin:
            win += 1
            profit += STAKE * (p.get("odd", 1.0) - 1.0)
            lines.append(f"{p['home']} {gh}-{ga} {p['away']} | ‚úÖ +{STAKE*(p.get('odd',1.0)-1.0):.2f}")
        else:
            lose += 1
            profit -= STAKE
            lines.append(f"{p['home']} {gh}-{ga} {p['away']} | ‚ùå -{STAKE:.2f}")
        time.sleep(0.2)
    return played, win, lose, open_, profit, lines

def report_day(d: date):
    state = load_state()
    picks = list_picks_between(state, d, d)
    played, win, lose, open_, profit, lines = settle_and_summary(picks)
    msg = [
        "üìä *–û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å*",
        f"–î–∞—Ç–∞: {d.isoformat()}",
        f"–°—Ç–∞–≤–æ–∫: {len(picks)}, –°—ã–≥—Ä–∞–ª–æ: {win}, –ù–µ —Å—ã–≥—Ä–∞–ª–æ: {lose}, –û—Ç–∫—Ä—ã—Ç–æ: {open_}",
        f"–ü—Ä–æ—Ñ–∏—Ç (—Å—Ç–∞–≤–∫–∞={STAKE}): *{profit:+.2f}*",
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
    ]
    if lines:
        msg.extend(lines[:40])   # —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å
    else:
        msg.append("–ó–∞ —Å–µ–≥–æ–¥–Ω—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –±—ã–ª–æ.")
    send("\n".join(msg))

def report_week(d: date):
    # –Ω–µ–¥–µ–ª—è: —Å –ø–æ–Ω-–ø–æ –≤—Å–∫ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
    start = d - timedelta(days=d.weekday())  # –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    end = start + timedelta(days=6)
    state = load_state()
    picks = list_picks_between(state, start, end)
    played, win, lose, open_, profit, lines = settle_and_summary(picks)
    msg = [
        "üìä *–ù–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞*",
        f"–ü–µ—Ä–∏–æ–¥: {start.isoformat()} ‚Äî {end.isoformat()}",
        f"–°—Ç–∞–≤–æ–∫: {len(picks)}, –°—ã–≥—Ä–∞–ª–æ: {win}, –ù–µ —Å—ã–≥—Ä–∞–ª–æ: {lose}, –û—Ç–∫—Ä—ã—Ç–æ: {open_}",
        f"–ü—Ä–æ—Ñ–∏—Ç (—Å—Ç–∞–≤–∫–∞={STAKE}): *{profit:+.2f}*",
    ]
    send("\n".join(msg))

def report_month(d: date):
    year, month = d.year, d.month
    last_day = calendar.monthrange(year, month)[1]
    start = date(year, month, 1)
    end = date(year, month, last_day)
    state = load_state()
    picks = list_picks_between(state, start, end)
    played, win, lose, open_, profit, lines = settle_and_summary(picks)
    msg = [
        "üìä *–ú–µ—Å—è—á–Ω–∞—è —Å–≤–æ–¥–∫–∞*",
        f"–ü–µ—Ä–∏–æ–¥: {start.isoformat()} ‚Äî {end.isoformat()}",
        f"–°—Ç–∞–≤–æ–∫: {len(picks)}, –°—ã–≥—Ä–∞–ª–æ: {win}, –ù–µ —Å—ã–≥—Ä–∞–ª–æ: {lose}, –û—Ç–∫—Ä—ã—Ç–æ: {open_}",
        f"–ü—Ä–æ—Ñ–∏—Ç (—Å—Ç–∞–≤–∫–∞={STAKE}): *{profit:+.2f}*",
    ]
    send("\n".join(msg))

# ====== –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ======
def is_sunday(d: date) -> bool:
    return d.weekday() == 6

def is_last_day_of_month(d: date) -> bool:
    return d.day == calendar.monthrange(d.year, d.month)[1]

def main_loop():
    last_scan_date = None
    last_daily_date = None
    last_weekly = None  # (year, week)
    last_month = None   # (year, month)

    # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    send("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (–ø—Ä–µ–¥–º–∞—Ç—á, Render-ready). ‚ù§Ô∏è")
    send("‚ÑπÔ∏è –ì—Ä–∞—Ñ–∏–∫: —Å–∫–∞–Ω –≤ 08:00; –æ—Ç—á—ë—Ç 23:30; –Ω–µ–¥–µ–ª—è ‚Äî –≤—Å 23:50; –º–µ—Å—è—Ü ‚Äî –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å 23:50.")

    while True:
        try:
            now = now_local()
            d = now.date()

            # –°–∫–∞–Ω –≤ 08:00  (–æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å)
            if (now.hour, now.minute) == (SCAN_HR, SCAN_MIN) and last_scan_date != d:
                cnt = scan_day(d)
                send(f"‚úÖ –°–∫–∞–Ω –Ω–∞ {d.isoformat()} –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: *{cnt}*.")
                last_scan_date = d

            # –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç 23:30
            if (now.hour, now.minute) == (DAILY_HR, DAILY_MIN) and last_daily_date != d:
                report_day(d)
                last_daily_date = d

            # –ù–µ–¥–µ–ª—å–Ω—ã–π ‚Äî –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º 23:50
            year, week, _ = now.isocalendar()
            if is_sunday(d) and (now.hour, now.minute) == (WEEKLY_HR, WEEKLY_MIN):
                if last_weekly != (year, week):
                    report_week(d)
                    last_weekly = (year, week)

            # –ú–µ—Å—è—á–Ω—ã–π ‚Äî –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å 23:50
            if is_last_day_of_month(d) and (now.hour, now.minute) == (MONTHLY_HR, MONTHLY_MIN):
                ym = (d.year, d.month)
                if last_month != ym:
                    report_month(d)
                    last_month = ym

            time.sleep(1)
        except Exception as e:
            log.exception("main_loop error")
            time.sleep(5)

# ====== RUN ======
if __name__ == "__main__":
    # web-keepalive –¥–ª—è Render
    Thread(target=run_http, daemon=True).start()
    # —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ–ª–ª–∏–Ω–≥
    Thread(target=telebot_polling, daemon=True).start()
    # –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    main_loop()
