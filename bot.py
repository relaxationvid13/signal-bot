# -*- coding: utf-8 -*-
"""
–§—É—Ç–±–æ–ª—å–Ω—ã–π –±–æ—Ç:
- –û–∫–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (Europe/Warsaw): 16:00‚Äì23:29, –æ–ø—Ä–æ—Å live –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
- –ù–∞–¥—ë–∂–Ω—ã–π –æ—Ç—á—ë—Ç –≤ 23:30 (–¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ—Å–ø–∞–ª–∏ –º–æ–º–µ–Ω—Ç)
- –ù–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ (–≤—Å, 23:30) –∏ –º–µ—Å—è—á–Ω–∞—è —Å–≤–æ–¥–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞, 23:30)
- –°—Ç—Ä–∞—Ç–µ–≥–∏–∏:
  OVER-20: –∫ ~20' —É–∂–µ 2/3 –≥–æ–ª–∞ -> –¢–ë3/–¢–ë4 (–∫–æ—ç—Ñ –ø–æ –∂–µ–ª–∞–Ω–∏—é)
  UNDER-20: –∫ ~20' 0:0 -> –¢–ú3 (–∫–æ—ç—Ñ –ø–æ –∂–µ–ª–∞–Ω–∏—é)
–†–µ–Ω–¥–µ—Ä (Web Service, Free): –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –ª–µ–≥–∫–∏–π Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è "–∂–∏–≤–æ–≥–æ" –ø–æ—Ä—Ç–∞.
"""

import os
import sys
import time
import json
import logging
from datetime import datetime, date, time as dtime, timedelta

import pytz
import requests
import telebot

# ---- Render keep-alive (Flask) ----
from threading import Thread
from flask import Flask

app = Flask(__name__)

@app.get("/")
def healthcheck():
    return "ok"

def run_http():
    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)

# ========= –°–µ–∫—Ä–µ—Ç—ã/–æ–∫—Ä—É–∂–µ–Ω–∏–µ =========
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID")
API_KEY   = os.getenv("API_FOOTBALL_KEY")

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –í–∞—Ä—à–∞–≤–∞ (–ü–æ–ª—å—à–∞)
TIMEZONE  = "Europe/Warsaw"

if not API_TOKEN or not CHAT_ID or not API_KEY:
    sys.exit("‚ùå –ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_BOT_TOKEN / TELEGRAM_CHAT_ID / API_FOOTBALL_KEY")
CHAT_ID = int(CHAT_ID)

# ============= –ü–∞—Ä–∞–º–µ—Ç—Ä—ã =============
# –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ (–ª–æ–∫–∞–ª—å–Ω–æ–µ)
ACTIVE_FROM = dtime(16, 0)   # 16:00
ACTIVE_TILL = dtime(23, 29)  # 23:29
POLL_SEC    = 5 * 60         # 5 –º–∏–Ω—É—Ç –≤–Ω—É—Ç—Ä–∏ –æ–∫–Ω–∞
IDLE_SEC    = 10 * 60        # 10 –º–∏–Ω —Å–Ω–∞—Ä—É–∂–∏ –æ–∫–Ω–∞

# –û–∫–Ω–æ "–æ–∫–æ–ª–æ 20-–π –º–∏–Ω—É—Ç—ã"
WINDOW_20   = range(19, 23)  # 19..22 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ

# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (–≤–∫–ª—é—á–∞—é—Ç—Å—è —Ñ–ª–∞–≥–∞–º–∏ –Ω–∏–∂–µ)
# OVER-20: 2 –≥–æ–ª–∞ -> –¢–ë3 (–Ω—É–∂–µ–Ω >=4 –º—è—á–µ–π, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏),
#          3 –≥–æ–ª–∞ -> –¢–ë4 (–Ω—É–∂–µ–Ω >=5 –º—è—á–µ–π, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏)
USE_ODDS_OVER   = False   # –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ—ç—Ñ –¥–ª—è OVER-20
ODDS_MIN_OVER   = 1.29
ODDS_MAX_OVER   = 2.00

# UNDER-20: 0 –≥–æ–ª–æ–≤ -> –¢–ú3 (–æ–±—ã—á–Ω–æ <=2 –≥–æ–ª–∞, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏)
USE_ODDS_UNDER  = False   # –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ—ç—Ñ –¥–ª—è UNDER-20
ODDS_MIN_UNDER  = 1.60

# –£—Å–ª–æ–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ PnL –≤ –æ—Ç—á—ë—Ç–∞—Ö
STAKE          = 1.0

# –§–∞–π–ª—ã –ª–æ–≥–æ–≤/—Å–æ—Å—Ç–æ—è–Ω–∏—è
LOG_FILE   = "bot.log"
STATE_FILE = "signals.json"

# –í—Ä–µ–º—è –æ—Ç—á—ë—Ç–∞
REPORT_TIME = dtime(23, 30)  # 23:30

# ========= –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ===========
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s %(levelname)s: %(message)s"
)
log = logging.getLogger("signal-bot")

# ========= –¢–µ–ª–µ–≥—Ä–∞–º =========
bot = telebot.TeleBot(API_TOKEN, parse_mode="Markdown")

def send(text: str):
    try:
        bot.send_message(CHAT_ID, text)
    except Exception as e:
        log.error(f"Telegram send error: {e}")

# ========= API-Football =========
API = requests.Session()
API.headers.update({"x-apisports-key": API_KEY})
DEFAULT_TIMEOUT = 15

def get_live_fixtures():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ live-–º–∞—Ç—á–µ–π: API-Football /fixtures?live=all
    """
    try:
        r = API.get(
            "https://v3.football.api-sports.io/fixtures?live=all",
            timeout=DEFAULT_TIMEOUT
        )
        if r.status_code != 200:
            log.warning("fixtures HTTP %s %s", r.status_code, r.text[:200])
        r.raise_for_status()
        return r.json().get("response", []) or []
    except Exception as e:
        log.error(f"get_live_fixtures error: {e}")
        return []

def get_fixture_by_id(fid: int):
    """
    –û–¥–∏–Ω –º–∞—Ç—á –ø–æ id, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—á—ë—Ç–∞/—Å—Ç–∞—Ç—É—Å–∞.
    """
    try:
        r = API.get(
            f"https://v3.football.api-sports.io/fixtures?id={fid}",
            timeout=DEFAULT_TIMEOUT
        )
        r.raise_for_status()
        resp = r.json().get("response", []) or []
        return resp[0] if resp else None
    except Exception as e:
        log.error(f"get_fixture_by_id({fid}) error: {e}")
        return None

# –í–ù–ò–ú–ê–ù–ò–ï: endpoint –∫—ç—Ñ–æ–≤ –≤ API-Football –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ.
# –ù–∏–∂–µ ‚Äî ¬´–∑–∞–≥–ª—É—à–∫–∞¬ª —Å–æ —Å—Ö–µ–º–æ–π; —Å–¥–µ–ª–∞–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –∏ –º–∞–ø–ø–∏–Ω–≥ –ø–æ–¥ –≤–∞—à —Ç–∞—Ä–∏—Ñ.
def get_odds_for_market(fid: int, market_code: str):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è —Ä—ã–Ω–∫–∞.
    market_code –ø—Ä–∏–º–µ—Ä—ã: 'over_3', 'over_4', 'under_3' ‚Äî —ç—Ç–æ –≤–∞—à–∏ —É—Å–ª–æ–≤–Ω—ã–µ "–∫–ª—é—á–∏".
    –ó–¥–µ—Å—å –≤–µ—Ä–Ω—ë–º None (–Ω–µ—Ç –∫—ç—Ñ–∞), —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å –∫–≤–æ—Ç—É. –í–∫–ª—é—á–∏—Ç–µ –∏ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ,
    –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø –∫ odds endpoint.
    """
    # –ø—Ä–∏–º–µ—Ä —Å—Ö–µ–º—É (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω):
    # url = f"https://v3.football.api-sports.io/odds?fixture={fid}"
    # r = API.get(url, timeout=DEFAULT_TIMEOUT)
    # parse = ...
    return None  # –æ—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# ========= –ü–∞–º—è—Ç—å/—Å–æ—Å—Ç–æ—è–Ω–∏–µ =========
# signals: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π:
#  {
#     "date": "YYYY-MM-DD",
#     "fixture_id": int,
#     "home": str, "away": str,
#     "country": str, "league": str,
#     "snapshot_minute": int,
#     "snapshot_score_home": int, "snapshot_score_away": int,
#     "signal_type": "OVER20_TB3"|"OVER20_TB4"|"UNDER20_TM3",
#     "odds": float|null
#  }
signals = []
signaled_ids = set()  # —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ –≤—Ä–µ–º—è –¥–Ω—è
_last_report_for_date = None  # –æ—Ç–º–µ—Ç–∫–∞ –æ—Ç—á—ë—Ç–æ–≤

def load_state():
    global signals, signaled_ids, _last_report_for_date
    if not os.path.exists(STATE_FILE):
        return
    try:
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        signals = data.get("signals", [])
        signaled_ids = set(data.get("signaled_ids", []))
        rep = data.get("last_report_date")
        _last_report_for_date = date.fromisoformat(rep) if rep else None
    except Exception as e:
        log.error(f"load_state error: {e}")

def save_state():
    try:
        data = {
            "signals": signals,
            "signaled_ids": list(signaled_ids),
            "last_report_date": _last_report_for_date.isoformat() if _last_report_for_date else None
        }
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False)
    except Exception as e:
        log.error(f"save_state error: {e}")

# ========= –í—Ä–µ–º—è/–æ–∫–Ω–∞ =========
def now_local() -> datetime:
    return datetime.now(pytz.timezone(TIMEZONE))

def in_active_window(now: datetime) -> bool:
    t = now.time()
    return ACTIVE_FROM <= t <= ACTIVE_TILL

def is_last_day_of_month(d: date) -> bool:
    next_day = d + timedelta(days=1)
    return next_day.day == 1

# ======== –û—Ç—á—ë—Ç—ã: robust-triggers ========
def need_daily_report(now: datetime) -> bool:
    """
    True, –µ—Å–ª–∏ –æ—Ç—á—ë—Ç –∑–∞ '—Å–µ–≥–æ–¥–Ω—è' –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è –∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è >= 23:30,
    –∏–ª–∏ –µ—Å–ª–∏ —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å (00:xx), –∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –æ—Ç—á—ë—Ç –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–¥–æ–≥–æ–Ω—è–µ–º).
    """
    global _last_report_for_date
    today = now.date()

    # –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è >= 23:30 –∏ –æ—Ç—á—ë—Ç–∞ –µ—â—ë –Ω–µ –±—ã–ª–æ
    if _last_report_for_date != today and now.time() >= REPORT_TIME:
        return True

    # –µ—Å–ª–∏ —É–∂–µ –Ω–æ–≤—ã–π –¥–µ–Ω—å, –∞ –∑–∞ –≤—á–µ—Ä–∞ –º—ã –Ω–µ –æ—Ç—á–∏—Ç–∞–ª–∏—Å—å (–±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª–∏/–ø—Ä–æ—Å–ø–∞–ª–∏)
    yesterday = today - timedelta(days=1)
    if _last_report_for_date != yesterday and now.time() < REPORT_TIME:
        return True

    return False

def mark_report_sent(now: datetime):
    global _last_report_for_date
    _last_report_for_date = now.date()
    save_state()

# ======== –°—Ç—Ä–∞—Ç–µ–≥–∏–∏: –¥–µ—Ç–µ–∫—Ç & —Ñ–∏–∫—Å–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ ========
def push_signal(now: datetime, m, sig_type: str, odds: float | None):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª (–æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ fixture_id –≤ —Ä–∞–º–∫–∞—Ö –¥–Ω—è), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram.
    """
    f = m["fixture"]
    L = m["league"]
    g = m["goals"]
    t = m["teams"]

    fid = f["id"]
    elapsed = f["status"]["elapsed"] or 0
    gh, ga = g["home"] or 0, g["away"] or 0

    rec = {
        "date": now.date().isoformat(),
        "fixture_id": fid,
        "home": t["home"]["name"],
        "away": t["away"]["name"],
        "country": L["country"],
        "league": L["name"],
        "snapshot_minute": int(elapsed),
        "snapshot_score_home": gh,
        "snapshot_score_away": ga,
        "signal_type": sig_type,
        "odds": odds
    }
    signals.append(rec)
    signaled_ids.add(fid)
    save_state()

    text = []
    text.append("‚ö™ *–°–∏–≥–Ω–∞–ª!*")
    text.append(f"üèÜ {rec['country']} ‚Äî {rec['league']}")
    text.append(f"{rec['home']} {gh} ‚Äî {ga} {rec['away']}")
    text.append(f"‚è± ~{elapsed}'")
    if sig_type == "OVER20_TB3":
        text.append("–°—Ç—Ä–∞—Ç–µ–≥–∏—è: OVER-20 ‚Üí *–¢–ë3*")
    elif sig_type == "OVER20_TB4":
        text.append("–°—Ç—Ä–∞—Ç–µ–≥–∏—è: OVER-20 ‚Üí *–¢–ë4*")
    elif sig_type == "UNDER20_TM3":
        text.append("–°—Ç—Ä–∞—Ç–µ–≥–∏—è: UNDER-20 ‚Üí *–¢–ú3*")
    if odds:
        text.append(f"–ö–æ—ç—Ñ: *{odds:.2f}*")
    text.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
    send("\n".join(text))

def check_over20(m) -> tuple[bool, str | None, float | None]:
    """
    –ï—Å–ª–∏ –∫ ~20' —É–∂–µ 2 –∏–ª–∏ 3 –≥–æ–ª–∞:
     - 2 –≥–æ–ª–∞ -> –¢–ë3 (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º sig_type='OVER20_TB3')
     - 3 –≥–æ–ª–∞ -> –¢–ë4 (sig_type='OVER20_TB4')
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, sig_type, odds).
    –ü—Ä–∏ –≤–∫–ª—é—á—ë–Ω–Ω–æ–º USE_ODDS_OVER –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–∫–Ω–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤.
    """
    f = m["fixture"]
    g = m["goals"]
    elapsed = f["status"]["elapsed"] or 0
    if elapsed not in WINDOW_20:
        return False, None, None

    gh, ga = g["home"] or 0, g["away"] or 0
    total = gh + ga
    if total == 2:
        sig_type = "OVER20_TB3"
        odds = None
        if USE_ODDS_OVER:
            odds = get_odds_for_market(f["id"], "over_3")
            if odds is None or not (ODDS_MIN_OVER <= odds <= ODDS_MAX_OVER):
                return False, None, None
        return True, sig_type, odds

    if total == 3:
        sig_type = "OVER20_TB4"
        odds = None
        if USE_ODDS_OVER:
            odds = get_odds_for_market(f["id"], "over_4")
            if odds is None or not (ODDS_MIN_OVER <= odds <= ODDS_MAX_OVER):
                return False, None, None
        return True, sig_type, odds

    return False, None, None

def check_under20(m) -> tuple[bool, str | None, float | None]:
    """
    –ï—Å–ª–∏ –∫ ~20' —Å—á—ë—Ç 0:0 ‚Äî —Å—Ç–∞–≤–∫–∞ –¢–ú3 (UNDER-20).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, 'UNDER20_TM3', odds).
    –ü—Ä–∏ –≤–∫–ª—é—á—ë–Ω–Ω–æ–º USE_ODDS_UNDER –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ—ç—Ñ >= ODDS_MIN_UNDER.
    """
    f = m["fixture"]
    g = m["goals"]
    elapsed = f["status"]["elapsed"] or 0
    if elapsed not in WINDOW_20:
        return False, None, None

    gh, ga = g["home"] or 0, g["away"] or 0
    if (gh + ga) != 0:
        return False, None, None

    sig_type = "UNDER20_TM3"
    odds = None
    if USE_ODDS_UNDER:
        odds = get_odds_for_market(f["id"], "under_3")
        if odds is None or odds < ODDS_MIN_UNDER:
            return False, None, None
    return True, sig_type, odds

def scan_and_signal(now: datetime) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª (–¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø–∞—É–∑—ã).
    """
    live = get_live_fixtures()
    sent_any = False
    for m in live:
        try:
            f = m["fixture"]
            fid = f["id"]

            # –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞ –≤ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
            if fid in signaled_ids:
                continue

            ok, sig_type, odds = check_over20(m)
            if ok:
                push_signal(now, m, sig_type, odds)
                sent_any = True
                continue

            ok, sig_type, odds = check_under20(m)
            if ok:
                push_signal(now, m, sig_type, odds)
                sent_any = True
                continue

        except Exception as e:
            log.error(f"scan_and_signal item error: {e}")
    return sent_any

# ========= –ü–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ =========
def settle_signal(rec: dict) -> tuple[bool, int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (is_win, required_goals_for_win)
    OVER20_TB3 -> –≤—ã–∏–≥—Ä—ã—à –µ—Å–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π total >= 4
    OVER20_TB4 -> –≤—ã–∏–≥—Ä—ã—à –µ—Å–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π total >= 5
    UNDER20_TM3 -> –≤—ã–∏–≥—Ä—ã—à –µ—Å–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π total <= 2
    """
    fid = rec["fixture_id"]
    snap_total = rec["snapshot_score_home"] + rec["snapshot_score_away"]
    sig = rec["signal_type"]

    data = get_fixture_by_id(fid)
    if not data:
        return False, -999  # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ

    st = data["fixture"]["status"]["short"]
    gh = data["goals"]["home"] or 0
    ga = data["goals"]["away"] or 0
    final_total = gh + ga

    if st != "FT":  # –º–∞—Ç—á –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω, —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        return False, -998

    if sig == "OVER20_TB3":
        return (final_total >= 4), 4
    if sig == "OVER20_TB4":
        return (final_total >= 5), 5
    if sig == "UNDER20_TM3":
        return (final_total <= 2), 3  # –¢–ú3 => –≤—ã–∏–≥—Ä—ã—à –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–µ <=2

    return False, -997

# ========= –û—Ç—á—ë—Ç—ã =========
def daily_report(now: datetime):
    """
    –û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–ø–æ –¥–∞—Ç–µ –∏–∑ rec['date'] == —Å–µ–≥–æ–¥–Ω—è).
    """
    today = now.date().isoformat()
    today_signals = [r for r in signals if r["date"] == today]

    wins = loses = unknown = 0
    pnl = 0.0
    lines = ["üìä *–û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å*"]

    if not today_signals:
        lines.append("–ó–∞ —Å–µ–≥–æ–¥–Ω—è —Å—Ç–∞–≤–æ–∫ –Ω–µ –±—ã–ª–æ.")
        send("\n".join(lines))
        return

    for i, rec in enumerate(today_signals, 1):
        ok, needed = settle_signal(rec)
        home = rec["home"]; away = rec["away"]
        sig  = rec["signal_type"]
        odds = rec.get("odds")

        # –∏—Ç–æ–≥–∏
        if ok is True:
            wins += 1
            pnl += +STAKE
            mark = "‚úÖ"
        elif ok is False and needed in (-997, -998, -999):
            unknown += 1
            mark = "‚Ä¶"
        else:
            loses += 1
            pnl += -STAKE
            mark = "‚ùå"

        oddstxt = f" | {odds:.2f}" if odds else ""
        # –∫—Ä–∞—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
        lines.append(f"#{i} {mark} {home} ‚Äî {away} | {sig}{oddstxt}")

    total = len(today_signals)
    passrate = (wins / total * 100.0) if total else 0.0

    lines.append("")
    lines.append(f"–ò—Ç–æ–≥–æ: {wins} / {total}  | –ü—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å: {passrate:.1f}%")
    lines.append(f"–ü—Ä–æ—Ñ–∏—Ç (—Å—Ç–∞–≤–∫–∞={STAKE:g}): {pnl:+.2f}")
    send("\n".join(lines))

def _aggregate_by_period(dfrom: date, dto: date):
    subset = [r for r in signals if dfrom <= date.fromisoformat(r["date"]) <= dto]
    wins = loses = unknown = 0
    pnl = 0.0
    for rec in subset:
        ok, _ = settle_signal(rec)
        if ok is True:
            wins += 1
            pnl += +STAKE
        elif ok is False and _ in (-997, -998, -999):
            unknown += 1
        else:
            loses += 1
            pnl += -STAKE
    total = len(subset)
    rate = (wins / total * 100.0) if total else 0.0
    return total, wins, loses, unknown, pnl, rate

def weekly_report(now: datetime):
    # –æ—Ç—á—ë—Ç –∑–∞ ISO-–Ω–µ–¥–µ–ª—é: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫..–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (–≤–∫–ª—é—á.)
    end = now.date()
    start = end - timedelta(days=6)
    total, wins, loses, unknown, pnl, rate = _aggregate_by_period(start, end)
    lines = [
        "üìÖ *–ù–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞*",
        f"–ü–µ—Ä–∏–æ–¥: {start.isoformat()} ‚Äî {end.isoformat()}",
        f"–°—Ç–∞–≤–æ–∫: {total}, –í–∏–Ω: {wins}, –õ—É–∑: {loses}, –ù/–¥: {unknown}",
        f"–ü—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å: {rate:.1f}%",
        f"–ü—Ä–æ—Ñ–∏—Ç (—Å—Ç–∞–≤–∫–∞={STAKE:g}): {pnl:+.2f}"
    ]
    send("\n".join(lines))

def monthly_report(now: datetime):
    end = now.date()
    start = end.replace(day=1)
    total, wins, loses, unknown, pnl, rate = _aggregate_by_period(start, end)
    lines = [
        "üóìÔ∏è *–ú–µ—Å—è—á–Ω–∞—è —Å–≤–æ–¥–∫–∞*",
        f"–ü–µ—Ä–∏–æ–¥: {start.isoformat()} ‚Äî {end.isoformat()}",
        f"–°—Ç–∞–≤–æ–∫: {total}, –í–∏–Ω: {wins}, –õ—É–∑: {loses}, –ù/–¥: {unknown}",
        f"–ü—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å: {rate:.1f}%",
        f"–ü—Ä–æ—Ñ–∏—Ç (—Å—Ç–∞–≤–∫–∞={STAKE:g}): {pnl:+.2f}"
    ]
    send("\n".join(lines))

# ========= RUN =========
if __name__ == "__main__":
    # HTTP –¥–ª—è Render
    Thread(target=run_http, daemon=True).start()

    load_state()

    send("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚Äî –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è!")
    send(
        "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ: 16:00‚Äì23:29 (PL), –æ–ø—Ä–æ—Å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.\n"
        "–û—Ç—á—ë—Ç—ã ‚Äî –≤ 23:30.\n"
        "–°—Ç—Ä–∞—Ç–µ–≥–∏–∏: OVER-20 (2/3 –≥–æ–ª–∞ ‚Üí –¢–ë3/4), UNDER-20 (0‚Äì0 ‚Üí –¢–ú3).\n"
        f"–§–∏–ª—å—Ç—Ä—ã –∫–æ—ç—Ñ–æ–≤: OVER={USE_ODDS_OVER} "
        f"(–æ–∫–Ω–æ {ODDS_MIN_OVER:.2f}‚Äì{ODDS_MAX_OVER:.2f}), "
        f"UNDER={USE_ODDS_UNDER} (‚â• {ODDS_MIN_UNDER:.2f})."
    )

    while True:
        try:
            now = now_local()

            # --- –æ—Ç—á—ë—Ç–Ω—ã–π –±–ª–æ–∫, —É—Å—Ç–æ–π—á–∏–≤—ã–π –∫ "–ø—Ä–æ—Å–ø–∞–ª–∏ –º–∏–Ω—É—Ç—É" ---
            if need_daily_report(now):
                daily_report(now)
                # –Ω–µ–¥–µ–ª—å–Ω–∞—è ‚Äî –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º
                if now.weekday() == 6:
                    weekly_report(now)
                # –º–µ—Å—è—á–Ω–∞—è ‚Äî –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
                if is_last_day_of_month(now.date()):
                    monthly_report(now)
                mark_report_sent(now)
                time.sleep(60)    # —á—Ç–æ–±—ã –Ω–µ –∑–∞–¥–≤–æ–∏—Ç—å –æ—Ç—á—ë—Ç
                continue

            # --- –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–æ—Å–∞ ---
            if in_active_window(now):
                was = scan_and_signal(now)
                # –µ—Å–ª–∏ ¬´–≥–æ—Ä—è—á–æ¬ª ‚Äî —Å–ª–µ–≥–∫–∞ –ø–µ—Ä–µ–¥–æ—Ö–Ω—ë–º
                time.sleep(60 if was else POLL_SEC)
            else:
                time.sleep(IDLE_SEC)

        except Exception as e:
            log.error(f"Main loop error: {e}")
            time.sleep(POLL_SEC)
